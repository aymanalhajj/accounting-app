--------------------------------------------------------
--  DDL for Package ACC_ACCOUNTS_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ACC_ACCOUNTS_TAPI" IS
    PROCEDURE ADD_RECORD (
        P_ACCOUNT_NAME_AR  IN  ACC_ACCOUNTS.ACCOUNT_NAME_AR%TYPE DEFAULT NULL,
        P_ACCOUNT_NAME_EN  IN  ACC_ACCOUNTS.ACCOUNT_NAME_EN%TYPE DEFAULT NULL,
        P_ACCOUNT_TYPE     IN  ACC_ACCOUNTS.ACCOUNT_TYPE%TYPE DEFAULT NULL,
        P_ACCOUNT_ID       IN  ACC_ACCOUNTS.ACCOUNT_ID%TYPE,
        P_ACCOUNT_PARENT   IN  ACC_ACCOUNTS.ACCOUNT_PARENT%TYPE DEFAULT NULL,
        P_SUB_ACCOUNT      IN  ACC_ACCOUNTS.SUB_ACCOUNT%TYPE DEFAULT 0,
        P_COMPANY_ID       IN  ACC_ACCOUNTS.COMPANY_ID%TYPE,
        P_ACCOUNT_NATURE   IN  ACC_ACCOUNTS.ACCOUNT_NATURE%TYPE DEFAULT NULL
    );

    PROCEDURE UPDATE_RECORD (
        P_ACCOUNT_NAME_AR  IN  ACC_ACCOUNTS.ACCOUNT_NAME_AR%TYPE DEFAULT NULL,
        P_ACCOUNT_NAME_EN  IN  ACC_ACCOUNTS.ACCOUNT_NAME_EN%TYPE DEFAULT NULL,
        P_ACCOUNT_TYPE     IN  ACC_ACCOUNTS.ACCOUNT_TYPE%TYPE DEFAULT NULL,
        P_ACCOUNT_ID       IN  ACC_ACCOUNTS.ACCOUNT_ID%TYPE,
        P_ACCOUNT_PARENT   IN  ACC_ACCOUNTS.ACCOUNT_PARENT%TYPE DEFAULT NULL,
        P_SUB_ACCOUNT      IN  ACC_ACCOUNTS.SUB_ACCOUNT%TYPE DEFAULT 0,
        P_COMPANY_ID       IN  ACC_ACCOUNTS.COMPANY_ID%TYPE,
        P_ACCOUNT_NATURE   IN  ACC_ACCOUNTS.ACCOUNT_NATURE%TYPE DEFAULT NULL
    );

END ACC_ACCOUNTS_TAPI;

/
--------------------------------------------------------
--  DDL for Package ACC_ACCOUNTS_XAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ACC_ACCOUNTS_XAPI" IS
   FUNCTION GET_ACCOUNT_NO(
      P_COMPANY_ID   IN NUMBER,
      P_PARENT_ID  IN NUMBER
       )RETURN NUMBER;

 PROCEDURE ADD_CLIENT_ACCOUNT(
     P_CLIENT_ID  NUMBER
   );

 PROCEDURE ADD_PROVIDER_ACCOUNT(
     P_PROVIDER_ID  NUMBER
   );
END ACC_ACCOUNTS_XAPI;

/
--------------------------------------------------------
--  DDL for Package ACC_JOURNAL_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ACC_JOURNAL_DTL_TAPI" IS
    PROCEDURE INSERT_JOURNAL_DTL (
        P_ACCOUNT_ID      IN      ACC_JOURNAL_DTL.ACCOUNT_ID%TYPE DEFAULT NULL,
        P_CREDIT          IN      ACC_JOURNAL_DTL.CREDIT%TYPE DEFAULT NULL,
        P_DEBIT           IN      ACC_JOURNAL_DTL.DEBIT%TYPE DEFAULT NULL,
        P_NOTE            IN      ACC_JOURNAL_DTL.NOTE%TYPE DEFAULT NULL,
        P_COST_CNTR_ID    IN      ACC_JOURNAL_DTL.COST_CNTR_ID%TYPE DEFAULT NULL,
        P_REF_NO          IN      ACC_JOURNAL_DTL.REF_NO%TYPE DEFAULT NULL,
        P_JOURNAL_ID      IN      ACC_JOURNAL_DTL.JOURNAL_ID%TYPE DEFAULT NULL,
        P_JOURNAL_DTL_ID  IN OUT  ACC_JOURNAL_DTL.JOURNAL_DTL_ID%TYPE
    );

    PROCEDURE UPDATE_JOURNAL_DTL (
        P_ACCOUNT_ID      IN  ACC_JOURNAL_DTL.ACCOUNT_ID%TYPE DEFAULT NULL,
        P_CREDIT          IN  ACC_JOURNAL_DTL.CREDIT%TYPE DEFAULT NULL,
        P_DEBIT           IN  ACC_JOURNAL_DTL.DEBIT%TYPE DEFAULT NULL,
        P_NOTE            IN  ACC_JOURNAL_DTL.NOTE%TYPE DEFAULT NULL,
        P_COST_CNTR_ID    IN  ACC_JOURNAL_DTL.COST_CNTR_ID%TYPE DEFAULT NULL,
        P_REF_NO          IN  ACC_JOURNAL_DTL.REF_NO%TYPE DEFAULT NULL,
        P_JOURNAL_DTL_ID  IN  ACC_JOURNAL_DTL.JOURNAL_DTL_ID%TYPE,
        P_JOURNAL_ID      IN  ACC_JOURNAL_DTL.JOURNAL_ID%TYPE DEFAULT NULL
    );

    PROCEDURE DELETE_JOURNAL_DTL (
        P_JOURNAL_DTL_ID IN ACC_JOURNAL_DTL.JOURNAL_DTL_ID%TYPE
    );

END ACC_JOURNAL_DTL_TAPI;

/
--------------------------------------------------------
--  DDL for Package ACC_JOURNAL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ACC_JOURNAL_TAPI" IS
    PROCEDURE INSERT_JOURNAL (
        P_JOURNAL_DATE    IN      ACC_JOURNAL.JOURNAL_DATE%TYPE DEFAULT NULL,
        P_NOTE            IN      ACC_JOURNAL.NOTE%TYPE DEFAULT NULL,
        P_COMPANY_ID      IN      NUMBER,
        P_JOURNAL_TYPE    IN      NUMBER DEFAULT 1,
        P_ACC_JOURNAL_ID  IN OUT  ACC_JOURNAL.ACC_JOURNAL_ID%TYPE
    );

    PROCEDURE UPDATE_JOURNAL (
        P_ACC_JOURNAL_ID  IN  ACC_JOURNAL.ACC_JOURNAL_ID%TYPE,
        P_JOURNAL_DATE    IN  ACC_JOURNAL.JOURNAL_DATE%TYPE DEFAULT NULL,
        P_COMPANY_ID      IN  NUMBER,
        P_NOTE            IN  ACC_JOURNAL.NOTE%TYPE DEFAULT NULL
    );

    PROCEDURE POST_JOURNAL (
        P_ACC_JOURNAL_ID IN ACC_JOURNAL.ACC_JOURNAL_ID%TYPE
    );

    PROCEDURE MAKE_JOURNAL (
        P_JOURNAL_TABLE   IN   JOURNAL_TABLE,
        P_JOURNAL_DATE    IN   ACC_JOURNAL.JOURNAL_DATE%TYPE DEFAULT SYSDATE,
        P_COMPANY_ID      IN   NUMBER,
        P_JOURNAL_TYPE    IN   NUMBER DEFAULT 1,
        P_JOURNAL_NOTE    IN   NVARCHAR2,
        P_ACC_JOURNAL_ID  OUT  NUMBER
    );

END ACC_JOURNAL_TAPI;

/
--------------------------------------------------------
--  DDL for Package ACC_LEDGER_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ACC_LEDGER_TAPI" IS
    PROCEDURE ADD_RECORD (
        P_CREDIT        IN      ACC_LEDGER.CREDIT%TYPE,
        P_DEBIT         IN      ACC_LEDGER.DEBIT%TYPE,
        P_ACCOUNT_ID    IN      ACC_LEDGER.ACCOUNT_ID%TYPE,
        P_JOURNAL_TYPE  IN      ACC_LEDGER.JOURNAL_TYPE%TYPE,
        P_JOURNAL_ID    IN      ACC_LEDGER.JOURNAL_ID%TYPE,
        P_JOURNAL_DATE  IN      ACC_LEDGER.JOURNAL_DATE%TYPE,
        P_COMPANY_ID    IN      NUMBER,
        P_NOTE          IN      ACC_LEDGER.NOTE%TYPE DEFAULT NULL,
        P_COST_CNTR_ID  IN      ACC_LEDGER.COST_CNTR_ID%TYPE DEFAULT NULL,
        P_LEDGER_ID     IN OUT  ACC_LEDGER.LEDGER_ID%TYPE
    );

END ACC_LEDGER_TAPI;

/
--------------------------------------------------------
--  DDL for Package ACC_VOUCHER_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ACC_VOUCHER_DTL_TAPI" IS
    PROCEDURE INSERT_DTL (
        P_ACCOUNT_ID      IN  ACC_VOUCHER_DTL.ACCOUNT_ID%TYPE DEFAULT NULL,
        P_AMOUNT          IN  ACC_VOUCHER_DTL.AMOUNT%TYPE DEFAULT NULL,
        P_ACC_VOUCHER_ID  IN  ACC_VOUCHER_DTL.ACC_VOUCHER_ID%TYPE DEFAULT NULL,
        P_NOTE            IN  ACC_VOUCHER_DTL.NOTE%TYPE DEFAULT NULL,
        P_TAX_RATE        IN  ACC_VOUCHER_DTL.TAX_RATE%TYPE DEFAULT NULL,
        P_TAX_AMOUNT      IN  ACC_VOUCHER_DTL.TAX_AMOUNT%TYPE DEFAULT NULL,
        P_REF_ID          IN  ACC_VOUCHER_DTL.REF_ID%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT    IN  ACC_VOUCHER_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CNTR_ID    IN  ACC_VOUCHER_DTL.COST_CNTR_ID%TYPE DEFAULT NULL
    );

    PROCEDURE UPDATE_DTL (
        P_ACCOUNT_ID          IN  ACC_VOUCHER_DTL.ACCOUNT_ID%TYPE DEFAULT NULL,
        P_AMOUNT              IN  ACC_VOUCHER_DTL.AMOUNT%TYPE DEFAULT NULL,
        P_ACC_VOUCHER_DTL_ID  IN  ACC_VOUCHER_DTL.ACC_VOUCHER_DTL_ID%TYPE,
        P_ACC_VOUCHER_ID      IN  ACC_VOUCHER_DTL.ACC_VOUCHER_ID%TYPE DEFAULT NULL,
        P_NOTE                IN  ACC_VOUCHER_DTL.NOTE%TYPE DEFAULT NULL,
        P_TAX_RATE            IN  ACC_VOUCHER_DTL.TAX_RATE%TYPE DEFAULT NULL,
        P_TAX_AMOUNT          IN  ACC_VOUCHER_DTL.TAX_AMOUNT%TYPE DEFAULT NULL,
        P_REF_ID              IN  ACC_VOUCHER_DTL.REF_ID%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT        IN  ACC_VOUCHER_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CNTR_ID        IN  ACC_VOUCHER_DTL.COST_CNTR_ID%TYPE DEFAULT NULL
    );

    PROCEDURE DELETE_DTL (
        P_ACC_VOUCHER_DTL_ID IN ACC_VOUCHER_DTL.ACC_VOUCHER_DTL_ID%TYPE
    );

    PROCEDURE UPDATE_DTL_BY_VOUCHER_ID (
        P_ACCOUNT_ID      IN  ACC_VOUCHER_DTL.ACCOUNT_ID%TYPE DEFAULT NULL,
        P_AMOUNT          IN  ACC_VOUCHER_DTL.AMOUNT%TYPE DEFAULT NULL,
        P_ACC_VOUCHER_ID  IN  ACC_VOUCHER_DTL.ACC_VOUCHER_ID%TYPE DEFAULT NULL
    );

END ACC_VOUCHER_DTL_TAPI;

/
--------------------------------------------------------
--  DDL for Package ACC_VOUCHER_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ACC_VOUCHER_TAPI" IS
    PROCEDURE INSERT_VOUCHER (
        P_AMOUNT          IN      ACC_VOUCHER.AMOUNT%TYPE DEFAULT NULL,
        P_ACCOUNT_ID      IN      ACC_VOUCHER.ACCOUNT_ID%TYPE DEFAULT NULL,
        P_PAID_TO         IN      ACC_VOUCHER.PAID_TO%TYPE DEFAULT NULL,
        P_REF_ID          IN      ACC_VOUCHER.REF_ID%TYPE DEFAULT NULL,
        P_PAYMENT_METHOD  IN      ACC_VOUCHER.PAYMENT_METHOD%TYPE DEFAULT NULL,
        P_VOUCHER_DATE    IN      ACC_VOUCHER.VOUCHER_DATE%TYPE DEFAULT NULL,
        P_VOUCHER_TYPE    IN      ACC_VOUCHER.VOUCHER_TYPE%TYPE DEFAULT NULL,
        P_NOTE            IN      ACC_VOUCHER.NOTE%TYPE DEFAULT NULL,
        P_COST_CNTR_ID    IN      ACC_VOUCHER.COST_CNTR_ID%TYPE DEFAULT NULL,
        P_CHECK_DATE      IN      ACC_VOUCHER.CHECK_DATE%TYPE DEFAULT NULL,
        P_CHECK_NO        IN      ACC_VOUCHER.CHECK_NO%TYPE DEFAULT NULL,
        P_TOTAL_VAT       IN      ACC_VOUCHER.TOTAL_VAT%TYPE DEFAULT NULL,
        P_COMPANY_ID      IN      ACC_VOUCHER.COMPANY_ID%TYPE,
        P_ACC_VOUCHER_ID  IN OUT  ACC_VOUCHER.ACC_VOUCHER_ID%TYPE
    );

    PROCEDURE UPDATE_VOUCHER (
        P_AMOUNT          IN  ACC_VOUCHER.AMOUNT%TYPE DEFAULT NULL,
        P_ACCOUNT_ID      IN  ACC_VOUCHER.ACCOUNT_ID%TYPE DEFAULT NULL,
        P_PAID_TO         IN  ACC_VOUCHER.PAID_TO%TYPE DEFAULT NULL,
        P_ACC_VOUCHER_ID  IN  ACC_VOUCHER.ACC_VOUCHER_ID%TYPE,
        P_REF_ID          IN  ACC_VOUCHER.REF_ID%TYPE DEFAULT NULL,
        P_VOUCHER_DATE    IN  ACC_VOUCHER.VOUCHER_DATE%TYPE DEFAULT NULL,
        P_VOUCHER_TYPE    IN  ACC_VOUCHER.VOUCHER_TYPE%TYPE DEFAULT NULL,
        P_NOTE            IN  ACC_VOUCHER.NOTE%TYPE DEFAULT NULL,
        P_PAYMENT_METHOD  IN  ACC_VOUCHER.PAYMENT_METHOD%TYPE DEFAULT NULL,
        P_COST_CNTR_ID    IN  ACC_VOUCHER.COST_CNTR_ID%TYPE DEFAULT NULL,
        P_CHECK_DATE      IN  ACC_VOUCHER.CHECK_DATE%TYPE DEFAULT NULL,
        P_CHECK_NO        IN  ACC_VOUCHER.CHECK_NO%TYPE DEFAULT NULL,
        P_TOTAL_VAT       IN      ACC_VOUCHER.TOTAL_VAT%TYPE DEFAULT NULL,
        P_COMPANY_ID      IN  ACC_VOUCHER.COMPANY_ID%TYPE
    );

    PROCEDURE POST_CASH_OUT_VOUCHER (
        P_ACC_VOUCHER_ID IN ACC_VOUCHER.ACC_VOUCHER_ID%TYPE
    );

    PROCEDURE POST_CASH_IN_VOUCHER (
        P_ACC_VOUCHER_ID IN ACC_VOUCHER.ACC_VOUCHER_ID%TYPE
    );

END ACC_VOUCHER_TAPI;

/
--------------------------------------------------------
--  DDL for Package ADMIN_COMPANY_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ADMIN_COMPANY_TAPI" is
--------------------------------------------------------------
-- create procedure for table ADMIN_COMPANY
--------------------------------------------------------------
   procedure INSERT_ADMIN_COMPANY (
      P_COMPANY_ID  in OUT ADMIN_COMPANY.COMPANY_ID %TYPE                    ,
      P_NAME_AR     in ADMIN_COMPANY.NAME_AR    %TYPE                    default null,
      P_NAME_EN     in ADMIN_COMPANY.NAME_EN    %TYPE                    default null,
      P_MOBILE_NO   in ADMIN_COMPANY.MOBILE_NO  %TYPE                    default null,
      P_TEL_NO      in ADMIN_COMPANY.TEL_NO     %TYPE                    default null,
      P_FAX         in ADMIN_COMPANY.FAX        %TYPE                    default null,
      P_EMAIL       in ADMIN_COMPANY.EMAIL      %TYPE                    default null,
      P_TAX_NO      in ADMIN_COMPANY.TAX_NO     %TYPE                    default null,
      P_COUNTRY_ID  in ADMIN_COMPANY.COUNTRY_ID %TYPE                    default null,
      P_CITY_ID     in ADMIN_COMPANY.CITY_ID    %TYPE                    default null,
      P_REGION_ID   in ADMIN_COMPANY.REGION_ID  %TYPE                    default null,
      P_BUILDING_NO in ADMIN_COMPANY.BUILDING_NO%TYPE                    default null,
      P_SREET       in ADMIN_COMPANY.SREET      %TYPE                    default null,
      P_POST_CODE   in ADMIN_COMPANY.POST_CODE  %TYPE                    default null,
      P_NOTE        in ADMIN_COMPANY.NOTE       %TYPE                    default null,
      P_STATUS      in ADMIN_COMPANY.STATUS     %TYPE                    default null
   );
--------------------------------------------------------------
-- update procedure for table ADMIN_COMPANY
--------------------------------------------------------------
   procedure UPDATE_ADMIN_COMPANY (
      P_COMPANY_ID  in ADMIN_COMPANY.COMPANY_ID %TYPE  ,
      P_NAME_AR     in ADMIN_COMPANY.NAME_AR    %TYPE                     default null,
      P_NAME_EN     in ADMIN_COMPANY.NAME_EN    %TYPE                     default null,
      P_MOBILE_NO   in ADMIN_COMPANY.MOBILE_NO  %TYPE                     default null,
      P_TEL_NO      in ADMIN_COMPANY.TEL_NO     %TYPE                     default null,
      P_FAX         in ADMIN_COMPANY.FAX        %TYPE                     default null,
      P_EMAIL       in ADMIN_COMPANY.EMAIL      %TYPE                     default null,
      P_TAX_NO      in ADMIN_COMPANY.TAX_NO     %TYPE                     default null,
      P_COUNTRY_ID  in ADMIN_COMPANY.COUNTRY_ID %TYPE                     default null,
      P_CITY_ID     in ADMIN_COMPANY.CITY_ID    %TYPE                     default null,
      P_REGION_ID   in ADMIN_COMPANY.REGION_ID  %TYPE                     default null,
      P_BUILDING_NO in ADMIN_COMPANY.BUILDING_NO%TYPE                     default null,
      P_SREET       in ADMIN_COMPANY.SREET      %TYPE                     default null,
      P_POST_CODE   in ADMIN_COMPANY.POST_CODE  %TYPE                     default null,
      P_NOTE        in ADMIN_COMPANY.NOTE       %TYPE                     default null,
      P_STATUS      in ADMIN_COMPANY.STATUS     %TYPE                     default null
   );
--------------------------------------------------------------
-- delete procedure for table ADMIN_COMPANY
--------------------------------------------------------------
   procedure DELELTE_ADMIN_COMPANY (
      P_COMPANY_ID   in ADMIN_COMPANY.COMPANY_ID %TYPE 
   );

end ADMIN_COMPANY_TAPI;

/
--------------------------------------------------------
--  DDL for Package ADMIN_USER_SESSION_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ADMIN_USER_SESSION_TAPI" IS
    PROCEDURE INS (
        P_USER_ID                IN   ADMIN_USER_SESSION.USER_ID%TYPE,
        P_COMPANY_ID             IN   ADMIN_USER_SESSION.COMPANY_ID%TYPE,
        P_USERNAME               IN   NVARCHAR2,
        P_USER_PREFERED_LANG     IN  VARCHAR2,
        P_USER_PREFERED_LANG_ID  IN  NUMBER,
        P_TOKEN                  OUT  ADMIN_USER_SESSION.TOKEN%TYPE,
        P_SESSION_ID             OUT  ADMIN_USER_SESSION.SESSION_ID%TYPE
    );

    PROCEDURE UPD (
        P_CREATED_AT  IN  ADMIN_USER_SESSION.CREATED_AT%TYPE DEFAULT NULL,
        P_EXPIRES     IN  ADMIN_USER_SESSION.EXPIRES%TYPE DEFAULT NULL,
        P_USER_ID     IN  ADMIN_USER_SESSION.USER_ID%TYPE DEFAULT NULL,
        P_SESSION_ID  IN  ADMIN_USER_SESSION.SESSION_ID%TYPE,
        P_TOKEN       IN  ADMIN_USER_SESSION.TOKEN%TYPE DEFAULT NULL,
        P_COMPANY_ID  IN  ADMIN_USER_SESSION.COMPANY_ID%TYPE DEFAULT NULL
    );

    PROCEDURE DEL (
        P_SESSION_ID IN ADMIN_USER_SESSION.SESSION_ID%TYPE
    );

END ADMIN_USER_SESSION_TAPI;

/
--------------------------------------------------------
--  DDL for Package AUTH
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "AUTH" AS
    FUNCTION HAS_PAGE_ACCESS (
        P_USER_ID  NUMBER,
        P_PAGE_ID  NUMBER
    ) RETURN BOOLEAN;

    FUNCTION HAS_ITEM_ACCESS (
        P_USER_ID       NUMBER,
        P_PAGE_ID       NUMBER,
        P_COMPONENT_ID  NUMBER
    ) RETURN BOOLEAN;

    FUNCTION LOGIN (
        P_USERNAME  NVARCHAR2,
        P_PASSWORD  NVARCHAR2
    ) RETURN BOOLEAN;

    PROCEDURE SET_USER_INFO (
        P_USERNAME               IN   NVARCHAR2,
        P_USER_PREFERED_LANG     OUT  VARCHAR2,
        P_USER_PREFERED_LANG_ID  OUT  NUMBER,
        P_COMPANY_ID             OUT  NUMBER,
        P_USER_ID                OUT  NUMBER
    );

END AUTH;

/
--------------------------------------------------------
--  DDL for Package COMPUTE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPUTE" AS
    FUNCTION CALC_INV (
        P_QUANTITY             NUMBER,
        P_BASE_PRICE           NUMBER,
        P_PRICE_WITH_VAT       NUMBER,
        P_TOTAL_PRICE          NUMBER,
        P_VAT_PERCENTAGE       NUMBER,
        P_DISCOUNT_PERCENTAGE  NUMBER
    ) RETURN INV_DTL_TBL;

    FUNCTION CALC_VAT (
        P_BASE_AMOUNT      NUMBER,
        P_AMOUNT_WITH_VAT  NUMBER,
        P_VAT_PERCENTAGE   NUMBER
    ) RETURN AMOUNT_VAT_TBL;

END COMPUTE;

/
--------------------------------------------------------
--  DDL for Package DATA_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "DATA_VALIDATION" AS
    PROCEDURE BRANCH_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE BANK_ACCOUNT_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE CURRENCY_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE UNIT_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE PRODUCT_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE PRODUCT_UNIT_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE PRODUCT_BARCODE_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE COUNTRY_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE CITY_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE REGION_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE PURCHASE_INV_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE PUR_RETURN_INV_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE FIRST_PERIOD_STOCK_INV_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE STOCKOUT_ORDER_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE CUSTOMER_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE USER_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE ROLE_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE COMPANY_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE SETUP_SAFE_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE SETUP_STORE_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE SETUP_TAX_GROUP_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE PROVIDER_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    PROCEDURE RECEIPT_VOUCHER_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

    FUNCTION GET_ERROR_MSG (
        P_MSG_ID  IN  NUMBER,
        P_LANG    IN  NUMBER
    ) RETURN VARCHAR2;

  PROCEDURE TRANSFER_ORDER_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

  PROCEDURE SALES_RETURN_INV_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

  PROCEDURE STOCKIN_ORDER_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

  PROCEDURE SETUP_PROD_GROUP_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

  PROCEDURE SALES_INV_VALIDATE (
        P_DATA    IN   JSON_OBJECT_T,
        P_LANG    IN   NUMBER,
        P_RESULT  OUT  JSON_OBJECT_T
    );

END;

/
--------------------------------------------------------
--  DDL for Package FILE_UTILE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "FILE_UTILE" AS
    PROCEDURE SAVE_FILE (
        P_FILE_CONTENT  IN OUT NOCOPY BLOB,
        P_FOLDER_NAME   IN  VARCHAR2,
        P_FILE_NAME     IN  VARCHAR2
    );

    PROCEDURE DELETE_FILE (
        P_FOLDER_NAME  IN  VARCHAR2,
        P_FILE_NAME    IN  VARCHAR2
    );

END FILE_UTILE;

/
--------------------------------------------------------
--  DDL for Package INV_JOURNAL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "INV_JOURNAL" AS
    PROCEDURE SALE_INV_JOURNAL (
        P_INVOICE_ID IN NUMBER
    );

    PROCEDURE SALE_RETURN_INV_JOURNAL (
        P_INVOICE_ID IN NUMBER
    );

    PROCEDURE PUR_INV_JOURNAL (
        P_INVOICE_ID IN NUMBER
    );

    PROCEDURE PUR_RETURN_INV_JOURNAL (
        P_INVOICE_ID IN NUMBER
    );

    PROCEDURE STOCKIN_ORDER_JOURNAL (
        P_ORDER_ID IN NUMBER
    );

    PROCEDURE STOCKOUT_ORDER_JOURNAL (
        P_ORDER_ID IN NUMBER
    );

    PROCEDURE FIRST_PERIOD_STOCK_INV_JOURNAL (
        P_INVOICE_ID IN NUMBER
    );

END INV_JOURNAL;

/
--------------------------------------------------------
--  DDL for Package MAKE_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "MAKE_ID" AS
    FUNCTION GET_PURCHASE_INV_ID (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_RENT_INV_ID (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_PUR_RETURN_INV_ID (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_FIRST_PERIOD_STOCK_INV_ID (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_PURCHASE_ORDER_ID (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_STOCKOUT_ORDER_ID (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_SALES_INV_ID (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_SALES_RETURN_INV_ID (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_STOCKIN_ORDER_ID (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_STORE_TRANSFER_ID (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

END MAKE_ID;

/
--------------------------------------------------------
--  DDL for Package MAKE_NO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "MAKE_NO" AS
    FUNCTION GET_PURCHASE_INV_NO (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_RENT_INV_NO (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_PUR_RETURN_INV_NO (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_FIRST_PERIOD_STOCK_INV_NO (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_PURCHASE_ORDER_NO (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_STOCKOUT_ORDER_NO (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_SALES_INV_NO (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_SALES_RETURN_INV_NO (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_STOCKIN_ORDER_NO (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

    FUNCTION GET_STORE_TRANSFER_NO (
        P_COMPANY_ID  NUMBER,
        P_BRANCH_ID   NUMBER
    ) RETURN NUMBER;

END MAKE_NO;

/
--------------------------------------------------------
--  DDL for Package MAKE_NOTE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "MAKE_NOTE" AS
    FUNCTION GET_JOURNAL_NOTE (
        P_LANG_ID       NUMBER,
        P_JOURNAL_TYPE  NUMBER,
        P_INVOICE_TYPE  NUMBER,
        P_REF_NO        NUMBER,
        P_FOR_VAT       NUMBER DEFAULT 0,
        P_CLIENT        VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION GET_STOCK_JOURNAL_NOTE (
        P_LANG_ID       NUMBER,
        P_JOURNAL_TYPE  NUMBER,
        P_REF_NO        NUMBER
    ) RETURN VARCHAR2;

END MAKE_NOTE;

/
--------------------------------------------------------
--  DDL for Package PWD_SECURITY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PWD_SECURITY" 
AUTHID DEFINER 
AS
   --توليد HASH لكلمة المرور
   FUNCTION GET_PWD_HMAC(P_PWD_PLN   NVARCHAR2)
        RETURN RAW;

   --التحقق من سلامة كلمة المرور
   FUNCTION VRFY_PWD_HMAC(
               P_PWD_PLN     NVARCHAR2,
               P_PWD_HMAC    RAW
               )RETURN NUMBER;

END PWD_SECURITY;

/
--------------------------------------------------------
--  DDL for Package SALES_INV_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_INV_DTL_TAPI" is
    type SALES_INV_DTL_TAPI_REC is record (
        INVOICE_DTL_ID            SALES_INV_DTL.INVOICE_DTL_ID%type,
        PRICE                     SALES_INV_DTL.PRICE%type,
        QUANTITY                  SALES_INV_DTL.QUANTITY%type,
        DISCOUNT_VALUE            SALES_INV_DTL.DISCOUNT_VALUE%type,
        PRODUCT_ID                SALES_INV_DTL.PRODUCT_ID%type,
        PRE_DISCOUNT_VAT_VALUE    SALES_INV_DTL.PRE_DISCOUNT_VAT_VALUE%type,
        INVOICE_ID                SALES_INV_DTL.INVOICE_ID%type,
        VAT_PERCENTAGE            SALES_INV_DTL.VAT_PERCENTAGE%type,
        TOTAL_PRICE               SALES_INV_DTL.TOTAL_PRICE%type,
        VAT_VALUE                 SALES_INV_DTL.VAT_VALUE%type,
        PRODUCT_UNIT_ID           SALES_INV_DTL.PRODUCT_UNIT_ID%type,
        DISCOUNT_PERCENTAGE       SALES_INV_DTL.DISCOUNT_PERCENTAGE%type,
        POST_DISCOUNT_TOTAL_PRICE SALES_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%type,
        TOTAL_AMOUNT              SALES_INV_DTL.TOTAL_AMOUNT%type
    );
    type SALES_INV_DTL_TAPI_TAB is
        table of SALES_INV_DTL_TAPI_REC;

-- insert
    procedure INSERT_SALES_INV_DTL (
        P_PRICE                     in SALES_INV_DTL.PRICE%type default null,
        P_QUANTITY                  in SALES_INV_DTL.QUANTITY%type default null,
        P_DISCOUNT_VALUE            in SALES_INV_DTL.DISCOUNT_VALUE%type default null,
        P_PRODUCT_ID                in SALES_INV_DTL.PRODUCT_ID%type default null,
        P_PRE_DISCOUNT_VAT_VALUE    in SALES_INV_DTL.PRE_DISCOUNT_VAT_VALUE%type default null,
        P_INVOICE_ID                in SALES_INV_DTL.INVOICE_ID%type default null,
        P_VAT_PERCENTAGE            in SALES_INV_DTL.VAT_PERCENTAGE%type default null,
        P_TOTAL_PRICE               in SALES_INV_DTL.TOTAL_PRICE%type default null,
        P_VAT_VALUE                 in SALES_INV_DTL.VAT_VALUE%type default null,
        P_PRODUCT_UNIT_ID           in SALES_INV_DTL.PRODUCT_UNIT_ID%type default null,
        P_DISCOUNT_PERCENTAGE       in SALES_INV_DTL.DISCOUNT_PERCENTAGE%type default null,
        P_POST_DISCOUNT_TOTAL_PRICE in SALES_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%type default null,
        P_TOTAL_AMOUNT              in SALES_INV_DTL.TOTAL_AMOUNT%type default null
    );
-- update
    procedure UPDATE_SALES_INV_DTL(
        P_INVOICE_DTL_ID            in SALES_INV_DTL.INVOICE_DTL_ID%type,
        P_PRICE                     in SALES_INV_DTL.PRICE%type default null,
        P_QUANTITY                  in SALES_INV_DTL.QUANTITY%type default null,
        P_DISCOUNT_VALUE            in SALES_INV_DTL.DISCOUNT_VALUE%type default null,
        P_PRODUCT_ID                in SALES_INV_DTL.PRODUCT_ID%type default null,
        P_PRE_DISCOUNT_VAT_VALUE    in SALES_INV_DTL.PRE_DISCOUNT_VAT_VALUE%type default null,
        P_INVOICE_ID                in SALES_INV_DTL.INVOICE_ID%type default null,
        P_VAT_PERCENTAGE            in SALES_INV_DTL.VAT_PERCENTAGE%type default null,
        P_TOTAL_PRICE               in SALES_INV_DTL.TOTAL_PRICE%type default null,
        P_VAT_VALUE                 in SALES_INV_DTL.VAT_VALUE%type default null,
        P_PRODUCT_UNIT_ID           in SALES_INV_DTL.PRODUCT_UNIT_ID%type default null,
        P_DISCOUNT_PERCENTAGE       in SALES_INV_DTL.DISCOUNT_PERCENTAGE%type default null,
        P_POST_DISCOUNT_TOTAL_PRICE in SALES_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%type default null,
        P_TOTAL_AMOUNT              in SALES_INV_DTL.TOTAL_AMOUNT%type default null
    );
-- delete
    procedure DELETE_SALES_INV_DTL (
        P_INVOICE_DTL_ID in SALES_INV_DTL.INVOICE_DTL_ID%type
    );

end SALES_INV_DTL_TAPI;

/
--------------------------------------------------------
--  DDL for Package SALES_INV_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_INV_TAPI" IS
    TYPE SALES_INV_TAPI_REC IS RECORD (
        BANK_ACC_ID                SALES_INV.BANK_ACC_ID%TYPE,
        ACC_JOURNAL_ID             SALES_INV.ACC_JOURNAL_ID%TYPE,
        PAID_AMOUNT                SALES_INV.PAID_AMOUNT%TYPE,
        SAFE_ID                    SALES_INV.SAFE_ID%TYPE,
        POST_DISCOUNT_TOTAL_AMOUNT SALES_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE,
        USER_ID                    SALES_INV.USER_ID%TYPE,
        TOTAL_DISCOUNT             SALES_INV.TOTAL_DISCOUNT%TYPE,
        INVOICE_DATE               SALES_INV.INVOICE_DATE%TYPE,
        NOTES                      SALES_INV.NOTES%TYPE,
        INVOICE_ID                 SALES_INV.INVOICE_ID%TYPE,
        INVOICE_TOTAL_AMOUNT       SALES_INV.INVOICE_TOTAL_AMOUNT%TYPE,
        INVOICE_TYPE               SALES_INV.INVOICE_TYPE%TYPE,
        CLIENT_ID                  SALES_INV.CLIENT_ID%TYPE,
        TOTAL_QUANTITY             SALES_INV.TOTAL_QUANTITY%TYPE,
        STORE_ID                   SALES_INV.STORE_ID%TYPE,
        PRE_TAX_TOTAL_AMOUNT       SALES_INV.PRE_TAX_TOTAL_AMOUNT%TYPE,
        COMPANY_ID                 SALES_INV.COMPANY_ID%TYPE,
        PAID_BANK_AMOUNT           SALES_INV.PAID_BANK_AMOUNT%TYPE,
        COST_CTR_ID                SALES_INV.COST_CTR_ID%TYPE,
        CLIENT_DISCOUNT            SALES_INV.CLIENT_DISCOUNT%TYPE,
        TOTAL_VAT                  SALES_INV.TOTAL_VAT%TYPE,
        PAYMENT_TYPE               SALES_INV.PAYMENT_TYPE%TYPE,
        DEFERRED_AMOUNT            SALES_INV.DEFERRED_AMOUNT%TYPE,
        STORE_DATE                 SALES_INV.STORE_DATE%TYPE,
        PAID_CASH_AMOUNT           SALES_INV.PAID_CASH_AMOUNT%TYPE
        
    );
    TYPE SALES_INV_TAPI_TAB IS
        TABLE OF SALES_INV_TAPI_REC;

-- INSERT
    PROCEDURE INSERT_SALES_INV (
        P_INVOICE_ID                 IN  OUT SALES_INV.INVOICE_ID%TYPE,
        P_BRANCH_ID                   IN      SALES_INV.BRANCH_ID%TYPE DEFAULT NULL,
        P_BANK_ACC_ID                IN SALES_INV.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_ACC_JOURNAL_ID             IN SALES_INV.ACC_JOURNAL_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                IN SALES_INV.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                    IN SALES_INV.SAFE_ID%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT IN SALES_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_USER_ID                    IN SALES_INV.USER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT             IN SALES_INV.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_DATE               IN SALES_INV.INVOICE_DATE%TYPE DEFAULT NULL,
        P_NOTES                      IN SALES_INV.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_TOTAL_AMOUNT       IN SALES_INV.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE               IN SALES_INV.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_CLIENT_ID                  IN SALES_INV.CLIENT_ID%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY             IN SALES_INV.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                   IN SALES_INV.STORE_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT       IN SALES_INV.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                 IN SALES_INV.COMPANY_ID%TYPE,
        P_PAID_BANK_AMOUNT           IN SALES_INV.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                IN SALES_INV.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT            IN SALES_INV.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_TOTAL_VAT                  IN SALES_INV.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE               IN SALES_INV.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT            IN SALES_INV.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_STORE_DATE                 IN SALES_INV.STORE_DATE%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT           IN SALES_INV.PAID_CASH_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_NO                 IN OUT SALES_INV.INVOICE_NO%TYPE
    );
-- UPDATE
    PROCEDURE UPDATE_SALES_INV (
        P_INVOICE_ID                 IN SALES_INV.INVOICE_ID%TYPE,
        P_BRANCH_ID                   IN      SALES_INV.BRANCH_ID%TYPE DEFAULT NULL,
        P_BANK_ACC_ID                IN SALES_INV.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_ACC_JOURNAL_ID             IN SALES_INV.ACC_JOURNAL_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                IN SALES_INV.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                    IN SALES_INV.SAFE_ID%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT IN SALES_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_USER_ID                    IN SALES_INV.USER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT             IN SALES_INV.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_DATE               IN SALES_INV.INVOICE_DATE%TYPE DEFAULT NULL,
        P_NOTES                      IN SALES_INV.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_TOTAL_AMOUNT       IN SALES_INV.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE               IN SALES_INV.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_CLIENT_ID                  IN SALES_INV.CLIENT_ID%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY             IN SALES_INV.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                   IN SALES_INV.STORE_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT       IN SALES_INV.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                 IN SALES_INV.COMPANY_ID%TYPE,
        P_PAID_BANK_AMOUNT           IN SALES_INV.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                IN SALES_INV.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT            IN SALES_INV.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_TOTAL_VAT                  IN SALES_INV.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE               IN SALES_INV.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT            IN SALES_INV.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_STORE_DATE                 IN SALES_INV.STORE_DATE%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT           IN SALES_INV.PAID_CASH_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_NO                 IN SALES_INV.INVOICE_NO%TYPE
    );
-- DELETE
    PROCEDURE DELETE_SALES_INV (
        P_INVOICE_ID IN SALES_INV.INVOICE_ID%TYPE
    );

END SALES_INV_TAPI;

/
--------------------------------------------------------
--  DDL for Package SALES_PRODUCT_FILES_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_PRODUCT_FILES_TAPI" IS

    PROCEDURE INS (
        P_PRODUCT_ID      IN  SALES_PRODUCT_FILES.PRODUCT_ID%TYPE DEFAULT NULL,
        P_FILE_SIZE       IN  SALES_PRODUCT_FILES.FILE_SIZE%TYPE DEFAULT NULL,
        P_FILE_MIME_TYPE  IN  SALES_PRODUCT_FILES.FILE_MIME_TYPE%TYPE DEFAULT NULL,
        P_FILE_PATH       IN  SALES_PRODUCT_FILES.FILE_PATH%TYPE DEFAULT NULL,
        P_IS_THUMBNAIL    IN  SALES_PRODUCT_FILES.IS_THUMBNAIL%TYPE DEFAULT NULL,
        P_FILE_ID         OUT  SALES_PRODUCT_FILES.FILE_ID%TYPE
    );

    PROCEDURE UPD (
        P_FILE_ID         IN  SALES_PRODUCT_FILES.FILE_ID%TYPE,
        P_PRODUCT_ID      IN  SALES_PRODUCT_FILES.PRODUCT_ID%TYPE DEFAULT NULL,
        P_FILE_SIZE       IN  SALES_PRODUCT_FILES.FILE_SIZE%TYPE DEFAULT NULL,
        P_FILE_PATH       IN  SALES_PRODUCT_FILES.FILE_PATH%TYPE DEFAULT NULL,
        P_FILE_MIME_TYPE  IN  SALES_PRODUCT_FILES.FILE_MIME_TYPE%TYPE DEFAULT NULL,
        P_IS_THUMBNAIL    IN  SALES_PRODUCT_FILES.IS_THUMBNAIL%TYPE DEFAULT NULL
    );

    PROCEDURE DEL (
        P_FILE_ID IN SALES_PRODUCT_FILES.FILE_ID%TYPE
    );

END SALES_PRODUCT_FILES_TAPI;

/
--------------------------------------------------------
--  DDL for Package SALES_PURCHASE_INV_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_PURCHASE_INV_DTL_TAPI" IS

    PROCEDURE INS (
        P_PRICE                      IN  SALES_PURCHASE_INV_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY                   IN  SALES_PURCHASE_INV_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_DISCOUNT_VALUE             IN  SALES_PURCHASE_INV_DTL.DISCOUNT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_ID                 IN  SALES_PURCHASE_INV_DTL.PRODUCT_ID%TYPE DEFAULT NULL,
        P_PRE_DISCOUNT_VAT_VALUE     IN  SALES_PURCHASE_INV_DTL.PRE_DISCOUNT_VAT_VALUE%TYPE DEFAULT NULL,
        P_INVOICE_ID                 IN  SALES_PURCHASE_INV_DTL.INVOICE_ID%TYPE DEFAULT NULL,
        P_VAT_PERCENTAGE             IN  SALES_PURCHASE_INV_DTL.VAT_PERCENTAGE%TYPE DEFAULT NULL,
        P_TOTAL_PRICE                IN  SALES_PURCHASE_INV_DTL.TOTAL_PRICE%TYPE DEFAULT NULL,
        P_VAT_VALUE                  IN  SALES_PURCHASE_INV_DTL.VAT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID            IN  SALES_PURCHASE_INV_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_DISCOUNT_PERCENTAGE        IN  SALES_PURCHASE_INV_DTL.DISCOUNT_PERCENTAGE%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_PRICE  IN  SALES_PURCHASE_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT               IN  SALES_PURCHASE_INV_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL
    );
    PROCEDURE UPD (
        P_PRICE                      IN  SALES_PURCHASE_INV_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY                   IN  SALES_PURCHASE_INV_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_DISCOUNT_VALUE             IN  SALES_PURCHASE_INV_DTL.DISCOUNT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_ID                 IN  SALES_PURCHASE_INV_DTL.PRODUCT_ID%TYPE DEFAULT NULL,
        P_PRE_DISCOUNT_VAT_VALUE     IN  SALES_PURCHASE_INV_DTL.PRE_DISCOUNT_VAT_VALUE%TYPE DEFAULT NULL,
        P_INVOICE_ID                 IN  SALES_PURCHASE_INV_DTL.INVOICE_ID%TYPE DEFAULT NULL,
        P_DTL_ID                     IN  SALES_PURCHASE_INV_DTL.DTL_ID%TYPE,
        P_VAT_PERCENTAGE             IN  SALES_PURCHASE_INV_DTL.VAT_PERCENTAGE%TYPE DEFAULT NULL,
        P_TOTAL_PRICE                IN  SALES_PURCHASE_INV_DTL.TOTAL_PRICE%TYPE DEFAULT NULL,
        P_VAT_VALUE                  IN  SALES_PURCHASE_INV_DTL.VAT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID            IN  SALES_PURCHASE_INV_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_DISCOUNT_PERCENTAGE        IN  SALES_PURCHASE_INV_DTL.DISCOUNT_PERCENTAGE%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_PRICE  IN  SALES_PURCHASE_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT               IN  SALES_PURCHASE_INV_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL
    );
    PROCEDURE DEL (
        P_DTL_ID IN SALES_PURCHASE_INV_DTL.DTL_ID%TYPE
    );

END SALES_PURCHASE_INV_DTL_TAPI;

/
--------------------------------------------------------
--  DDL for Package SALES_PURCHASE_INV_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_PURCHASE_INV_TAPI" IS
    PROCEDURE INS (
        P_BANK_ACC_ID                 IN      SALES_PURCHASE_INV.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_ACC_JOURNAL_ID              IN      SALES_PURCHASE_INV.ACC_JOURNAL_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                 IN      SALES_PURCHASE_INV.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                     IN      SALES_PURCHASE_INV.SAFE_ID%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT  IN      SALES_PURCHASE_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_USER_ID                     IN      SALES_PURCHASE_INV.USER_ID%TYPE DEFAULT NULL,
        P_PROVIDER_ID                 IN      SALES_PURCHASE_INV.PROVIDER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT              IN      SALES_PURCHASE_INV.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_DATE                IN      SALES_PURCHASE_INV.INVOICE_DATE%TYPE DEFAULT NULL,
        P_NOTES                       IN      SALES_PURCHASE_INV.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_TOTAL_AMOUNT        IN      SALES_PURCHASE_INV.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE                IN      SALES_PURCHASE_INV.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY              IN      SALES_PURCHASE_INV.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                    IN      SALES_PURCHASE_INV.STORE_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT        IN      SALES_PURCHASE_INV.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                  IN      SALES_PURCHASE_INV.COMPANY_ID%TYPE,
        P_PAID_BANK_AMOUNT            IN      SALES_PURCHASE_INV.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                 IN      SALES_PURCHASE_INV.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT             IN      SALES_PURCHASE_INV.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_TOTAL_VAT                   IN      SALES_PURCHASE_INV.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_ID             IN      SALES_PURCHASE_INV.PROVIDER_INV_ID%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE                IN      SALES_PURCHASE_INV.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT             IN      SALES_PURCHASE_INV.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_DATE           IN      SALES_PURCHASE_INV.PROVIDER_INV_DATE%TYPE DEFAULT NULL,
        P_STORE_DATE                  IN      SALES_PURCHASE_INV.STORE_DATE%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT            IN      SALES_PURCHASE_INV.PAID_CASH_AMOUNT%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN      SALES_PURCHASE_INV.BRANCH_ID%TYPE DEFAULT NULL,
        P_INVOICE_NO                  OUT     SALES_PURCHASE_INV.INVOICE_NO%TYPE,
        P_INVOICE_ID                  OUT     SALES_PURCHASE_INV.INVOICE_ID%TYPE
    );

    PROCEDURE UPD (
        P_BANK_ACC_ID                 IN  SALES_PURCHASE_INV.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_ACC_JOURNAL_ID              IN  SALES_PURCHASE_INV.ACC_JOURNAL_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                 IN  SALES_PURCHASE_INV.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                     IN  SALES_PURCHASE_INV.SAFE_ID%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT  IN  SALES_PURCHASE_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_USER_ID                     IN  SALES_PURCHASE_INV.USER_ID%TYPE DEFAULT NULL,
        P_PROVIDER_ID                 IN  SALES_PURCHASE_INV.PROVIDER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT              IN  SALES_PURCHASE_INV.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_DATE                IN  SALES_PURCHASE_INV.INVOICE_DATE%TYPE DEFAULT NULL,
        P_NOTES                       IN  SALES_PURCHASE_INV.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_ID                  IN  SALES_PURCHASE_INV.INVOICE_ID%TYPE,
        P_INVOICE_TOTAL_AMOUNT        IN  SALES_PURCHASE_INV.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE                IN  SALES_PURCHASE_INV.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY              IN  SALES_PURCHASE_INV.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                    IN  SALES_PURCHASE_INV.STORE_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT        IN  SALES_PURCHASE_INV.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                  IN  SALES_PURCHASE_INV.COMPANY_ID%TYPE,
        P_PAID_BANK_AMOUNT            IN  SALES_PURCHASE_INV.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                 IN  SALES_PURCHASE_INV.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT             IN  SALES_PURCHASE_INV.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_NO                  IN OUT  SALES_PURCHASE_INV.INVOICE_NO%TYPE,
        P_TOTAL_VAT                   IN  SALES_PURCHASE_INV.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_ID             IN  SALES_PURCHASE_INV.PROVIDER_INV_ID%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE                IN  SALES_PURCHASE_INV.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT             IN  SALES_PURCHASE_INV.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_DATE           IN  SALES_PURCHASE_INV.PROVIDER_INV_DATE%TYPE DEFAULT NULL,
        P_STORE_DATE                  IN  SALES_PURCHASE_INV.STORE_DATE%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT            IN  SALES_PURCHASE_INV.PAID_CASH_AMOUNT%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN  SALES_PURCHASE_INV.BRANCH_ID%TYPE DEFAULT NULL
    );

    PROCEDURE DEL (
        P_INVOICE_ID IN SALES_PURCHASE_INV.INVOICE_ID%TYPE
    );

END SALES_PURCHASE_INV_TAPI;

/
--------------------------------------------------------
--  DDL for Package SALES_PURCHASE_ORDER_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_PURCHASE_ORDER_DTL_TAPI" IS

    PROCEDURE INS (
        P_PRICE                      IN  SALES_PURCHASE_ORDER_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY                   IN  SALES_PURCHASE_ORDER_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_DISCOUNT_VALUE             IN  SALES_PURCHASE_ORDER_DTL.DISCOUNT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_ID                 IN  SALES_PURCHASE_ORDER_DTL.PRODUCT_ID%TYPE DEFAULT NULL,
        P_PRE_DISCOUNT_VAT_VALUE     IN  SALES_PURCHASE_ORDER_DTL.PRE_DISCOUNT_VAT_VALUE%TYPE DEFAULT NULL,
        P_ORDER_ID                 IN  SALES_PURCHASE_ORDER_DTL.ORDER_ID%TYPE DEFAULT NULL,
        P_VAT_PERCENTAGE             IN  SALES_PURCHASE_ORDER_DTL.VAT_PERCENTAGE%TYPE DEFAULT NULL,
        P_TOTAL_PRICE                IN  SALES_PURCHASE_ORDER_DTL.TOTAL_PRICE%TYPE DEFAULT NULL,
        P_VAT_VALUE                  IN  SALES_PURCHASE_ORDER_DTL.VAT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID            IN  SALES_PURCHASE_ORDER_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_DISCOUNT_PERCENTAGE        IN  SALES_PURCHASE_ORDER_DTL.DISCOUNT_PERCENTAGE%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_PRICE  IN  SALES_PURCHASE_ORDER_DTL.POST_DISCOUNT_TOTAL_PRICE%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT               IN  SALES_PURCHASE_ORDER_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL
    );
    PROCEDURE UPD (
        P_PRICE                      IN  SALES_PURCHASE_ORDER_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY                   IN  SALES_PURCHASE_ORDER_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_DISCOUNT_VALUE             IN  SALES_PURCHASE_ORDER_DTL.DISCOUNT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_ID                 IN  SALES_PURCHASE_ORDER_DTL.PRODUCT_ID%TYPE DEFAULT NULL,
        P_PRE_DISCOUNT_VAT_VALUE     IN  SALES_PURCHASE_ORDER_DTL.PRE_DISCOUNT_VAT_VALUE%TYPE DEFAULT NULL,
        P_ORDER_ID                 IN  SALES_PURCHASE_ORDER_DTL.ORDER_ID%TYPE DEFAULT NULL,
        P_DTL_ID                     IN  SALES_PURCHASE_ORDER_DTL.DTL_ID%TYPE,
        P_VAT_PERCENTAGE             IN  SALES_PURCHASE_ORDER_DTL.VAT_PERCENTAGE%TYPE DEFAULT NULL,
        P_TOTAL_PRICE                IN  SALES_PURCHASE_ORDER_DTL.TOTAL_PRICE%TYPE DEFAULT NULL,
        P_VAT_VALUE                  IN  SALES_PURCHASE_ORDER_DTL.VAT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID            IN  SALES_PURCHASE_ORDER_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_DISCOUNT_PERCENTAGE        IN  SALES_PURCHASE_ORDER_DTL.DISCOUNT_PERCENTAGE%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_PRICE  IN  SALES_PURCHASE_ORDER_DTL.POST_DISCOUNT_TOTAL_PRICE%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT               IN  SALES_PURCHASE_ORDER_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL
    );
    PROCEDURE DEL (
        P_DTL_ID IN SALES_PURCHASE_ORDER_DTL.DTL_ID%TYPE
    );

END SALES_PURCHASE_ORDER_DTL_TAPI;

/
--------------------------------------------------------
--  DDL for Package SALES_PURCHASE_ORDER_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_PURCHASE_ORDER_TAPI" IS
    PROCEDURE INS (
        P_BANK_ACC_ID                 IN   SALES_PURCHASE_ORDER.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                 IN   SALES_PURCHASE_ORDER.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                     IN   SALES_PURCHASE_ORDER.SAFE_ID%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT  IN   SALES_PURCHASE_ORDER.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_USER_ID                     IN   SALES_PURCHASE_ORDER.USER_ID%TYPE DEFAULT NULL,
        P_PROVIDER_ID                 IN   SALES_PURCHASE_ORDER.PROVIDER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT              IN   SALES_PURCHASE_ORDER.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_NOTES                       IN   SALES_PURCHASE_ORDER.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_TOTAL_AMOUNT        IN   SALES_PURCHASE_ORDER.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE                IN   SALES_PURCHASE_ORDER.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY              IN   SALES_PURCHASE_ORDER.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                    IN   SALES_PURCHASE_ORDER.STORE_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT        IN   SALES_PURCHASE_ORDER.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                  IN   SALES_PURCHASE_ORDER.COMPANY_ID%TYPE,
        P_ORDER_DATE                  IN   SALES_PURCHASE_ORDER.ORDER_DATE%TYPE DEFAULT NULL,
        P_PAID_BANK_AMOUNT            IN   SALES_PURCHASE_ORDER.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                 IN   SALES_PURCHASE_ORDER.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT             IN   SALES_PURCHASE_ORDER.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_TOTAL_VAT                   IN   SALES_PURCHASE_ORDER.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_ID             IN   SALES_PURCHASE_ORDER.PROVIDER_INV_ID%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE                IN   SALES_PURCHASE_ORDER.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_PROVIDER_INV_DATE           IN   SALES_PURCHASE_ORDER.PROVIDER_INV_DATE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT             IN   SALES_PURCHASE_ORDER.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_STORE_DATE                  IN   SALES_PURCHASE_ORDER.STORE_DATE%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT            IN   SALES_PURCHASE_ORDER.PAID_CASH_AMOUNT%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN      SALES_PURCHASE_ORDER.BRANCH_ID%TYPE DEFAULT NULL,
        P_ORDER_ID                    OUT  SALES_PURCHASE_ORDER.ORDER_ID%TYPE,
        P_ORDER_NO                    OUT  SALES_PURCHASE_ORDER.ORDER_NO%TYPE
    );

    PROCEDURE UPD (
        P_BANK_ACC_ID                 IN      SALES_PURCHASE_ORDER.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_ACC_JOURNAL_ID              IN      SALES_PURCHASE_ORDER.ACC_JOURNAL_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                 IN      SALES_PURCHASE_ORDER.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                     IN      SALES_PURCHASE_ORDER.SAFE_ID%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT  IN      SALES_PURCHASE_ORDER.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_USER_ID                     IN      SALES_PURCHASE_ORDER.USER_ID%TYPE DEFAULT NULL,
        P_PROVIDER_ID                 IN      SALES_PURCHASE_ORDER.PROVIDER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT              IN      SALES_PURCHASE_ORDER.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_NOTES                       IN      SALES_PURCHASE_ORDER.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_TOTAL_AMOUNT        IN      SALES_PURCHASE_ORDER.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE                IN      SALES_PURCHASE_ORDER.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY              IN      SALES_PURCHASE_ORDER.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                    IN      SALES_PURCHASE_ORDER.STORE_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT        IN      SALES_PURCHASE_ORDER.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                  IN      SALES_PURCHASE_ORDER.COMPANY_ID%TYPE,
        P_ORDER_DATE                  IN      SALES_PURCHASE_ORDER.ORDER_DATE%TYPE DEFAULT NULL,
        P_PAID_BANK_AMOUNT            IN      SALES_PURCHASE_ORDER.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                 IN      SALES_PURCHASE_ORDER.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT             IN      SALES_PURCHASE_ORDER.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_TOTAL_VAT                   IN      SALES_PURCHASE_ORDER.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_ID             IN      SALES_PURCHASE_ORDER.PROVIDER_INV_ID%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE                IN      SALES_PURCHASE_ORDER.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_PROVIDER_INV_DATE           IN      SALES_PURCHASE_ORDER.PROVIDER_INV_DATE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT             IN      SALES_PURCHASE_ORDER.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_STORE_DATE                  IN      SALES_PURCHASE_ORDER.STORE_DATE%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT            IN      SALES_PURCHASE_ORDER.PAID_CASH_AMOUNT%TYPE DEFAULT NULL,
        P_ORDER_ID                    IN      SALES_PURCHASE_ORDER.ORDER_ID%TYPE,
        P_BRANCH_ID                   IN      SALES_PURCHASE_ORDER.BRANCH_ID%TYPE DEFAULT NULL,
        P_ORDER_NO                    IN OUT  SALES_PURCHASE_ORDER.ORDER_NO%TYPE
    );

    PROCEDURE DEL (
        P_ORDER_ID IN SALES_PURCHASE_ORDER.ORDER_ID%TYPE
    );

END SALES_PURCHASE_ORDER_TAPI;

/
--------------------------------------------------------
--  DDL for Package SALES_PUR_RETURN_INV_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_PUR_RETURN_INV_DTL_TAPI" IS

    PROCEDURE INS (
        P_PRICE                      IN  SALES_PUR_RETURN_INV_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY                   IN  SALES_PUR_RETURN_INV_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_DISCOUNT_VALUE             IN  SALES_PUR_RETURN_INV_DTL.DISCOUNT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_ID                 IN  SALES_PUR_RETURN_INV_DTL.PRODUCT_ID%TYPE DEFAULT NULL,
        P_PRE_DISCOUNT_VAT_VALUE     IN  SALES_PUR_RETURN_INV_DTL.PRE_DISCOUNT_VAT_VALUE%TYPE DEFAULT NULL,
        P_INVOICE_ID                 IN  SALES_PUR_RETURN_INV_DTL.INVOICE_ID%TYPE DEFAULT NULL,
        P_VAT_PERCENTAGE             IN  SALES_PUR_RETURN_INV_DTL.VAT_PERCENTAGE%TYPE DEFAULT NULL,
        P_TOTAL_PRICE                IN  SALES_PUR_RETURN_INV_DTL.TOTAL_PRICE%TYPE DEFAULT NULL,
        P_VAT_VALUE                  IN  SALES_PUR_RETURN_INV_DTL.VAT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID            IN  SALES_PUR_RETURN_INV_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_DISCOUNT_PERCENTAGE        IN  SALES_PUR_RETURN_INV_DTL.DISCOUNT_PERCENTAGE%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_PRICE  IN  SALES_PUR_RETURN_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT               IN  SALES_PUR_RETURN_INV_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL
    );
    PROCEDURE UPD (
        P_PRICE                      IN  SALES_PUR_RETURN_INV_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY                   IN  SALES_PUR_RETURN_INV_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_DISCOUNT_VALUE             IN  SALES_PUR_RETURN_INV_DTL.DISCOUNT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_ID                 IN  SALES_PUR_RETURN_INV_DTL.PRODUCT_ID%TYPE DEFAULT NULL,
        P_PRE_DISCOUNT_VAT_VALUE     IN  SALES_PUR_RETURN_INV_DTL.PRE_DISCOUNT_VAT_VALUE%TYPE DEFAULT NULL,
        P_INVOICE_ID                 IN  SALES_PUR_RETURN_INV_DTL.INVOICE_ID%TYPE DEFAULT NULL,
        P_DTL_ID                     IN  SALES_PUR_RETURN_INV_DTL.DTL_ID%TYPE,
        P_VAT_PERCENTAGE             IN  SALES_PUR_RETURN_INV_DTL.VAT_PERCENTAGE%TYPE DEFAULT NULL,
        P_TOTAL_PRICE                IN  SALES_PUR_RETURN_INV_DTL.TOTAL_PRICE%TYPE DEFAULT NULL,
        P_VAT_VALUE                  IN  SALES_PUR_RETURN_INV_DTL.VAT_VALUE%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID            IN  SALES_PUR_RETURN_INV_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_DISCOUNT_PERCENTAGE        IN  SALES_PUR_RETURN_INV_DTL.DISCOUNT_PERCENTAGE%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_PRICE  IN  SALES_PUR_RETURN_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT               IN  SALES_PUR_RETURN_INV_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL
    );
    PROCEDURE DEL (
        P_DTL_ID IN SALES_PUR_RETURN_INV_DTL.DTL_ID%TYPE
    );

END SALES_PUR_RETURN_INV_DTL_TAPI;

/
--------------------------------------------------------
--  DDL for Package SALES_PUR_RETURN_INV_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_PUR_RETURN_INV_TAPI" IS
    PROCEDURE INS (
        P_BANK_ACC_ID                 IN   SALES_PUR_RETURN_INV.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                 IN   SALES_PUR_RETURN_INV.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                     IN   SALES_PUR_RETURN_INV.SAFE_ID%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT  IN   SALES_PUR_RETURN_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_USER_ID                     IN   SALES_PUR_RETURN_INV.USER_ID%TYPE DEFAULT NULL,
        P_PROVIDER_ID                 IN   SALES_PUR_RETURN_INV.PROVIDER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT              IN   SALES_PUR_RETURN_INV.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_DATE                IN   SALES_PUR_RETURN_INV.INVOICE_DATE%TYPE DEFAULT NULL,
        P_NOTES                       IN   SALES_PUR_RETURN_INV.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_TOTAL_AMOUNT        IN   SALES_PUR_RETURN_INV.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE                IN   SALES_PUR_RETURN_INV.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY              IN   SALES_PUR_RETURN_INV.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                    IN   SALES_PUR_RETURN_INV.STORE_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT        IN   SALES_PUR_RETURN_INV.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                  IN   SALES_PUR_RETURN_INV.COMPANY_ID%TYPE,
        P_PAID_BANK_AMOUNT            IN   SALES_PUR_RETURN_INV.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                 IN   SALES_PUR_RETURN_INV.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT             IN   SALES_PUR_RETURN_INV.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_TOTAL_VAT                   IN   SALES_PUR_RETURN_INV.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_ID             IN   SALES_PUR_RETURN_INV.PROVIDER_INV_ID%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE                IN   SALES_PUR_RETURN_INV.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT             IN   SALES_PUR_RETURN_INV.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_DATE           IN   SALES_PUR_RETURN_INV.PROVIDER_INV_DATE%TYPE DEFAULT NULL,
        P_STORE_DATE                  IN   SALES_PUR_RETURN_INV.STORE_DATE%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT            IN   SALES_PUR_RETURN_INV.PAID_CASH_AMOUNT%TYPE DEFAULT NULL,
        P_PURCHASE_INV_ID             IN   SALES_PUR_RETURN_INV.PURCHASE_INV_ID%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN      SALES_PUR_RETURN_INV.BRANCH_ID%TYPE DEFAULT NULL,
        P_INVOICE_ID                  OUT  SALES_PUR_RETURN_INV.INVOICE_ID%TYPE,
        P_INVOICE_NO                  OUT  SALES_PUR_RETURN_INV.INVOICE_NO%TYPE
    );

    PROCEDURE UPD (
        P_BANK_ACC_ID                 IN      SALES_PUR_RETURN_INV.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                 IN      SALES_PUR_RETURN_INV.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT  IN      SALES_PUR_RETURN_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                     IN      SALES_PUR_RETURN_INV.SAFE_ID%TYPE DEFAULT NULL,
        P_USER_ID                     IN      SALES_PUR_RETURN_INV.USER_ID%TYPE DEFAULT NULL,
        P_PROVIDER_ID                 IN      SALES_PUR_RETURN_INV.PROVIDER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT              IN      SALES_PUR_RETURN_INV.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_NOTES                       IN      SALES_PUR_RETURN_INV.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_DATE                IN      SALES_PUR_RETURN_INV.INVOICE_DATE%TYPE DEFAULT NULL,
        P_INVOICE_ID                  IN      SALES_PUR_RETURN_INV.INVOICE_ID%TYPE,
        P_INVOICE_TOTAL_AMOUNT        IN      SALES_PUR_RETURN_INV.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE                IN      SALES_PUR_RETURN_INV.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY              IN      SALES_PUR_RETURN_INV.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                    IN      SALES_PUR_RETURN_INV.STORE_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT        IN      SALES_PUR_RETURN_INV.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                  IN      SALES_PUR_RETURN_INV.COMPANY_ID%TYPE,
        P_PAID_BANK_AMOUNT            IN      SALES_PUR_RETURN_INV.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                 IN      SALES_PUR_RETURN_INV.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT             IN      SALES_PUR_RETURN_INV.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_NO                  IN OUT  SALES_PUR_RETURN_INV.INVOICE_NO%TYPE,
        P_TOTAL_VAT                   IN      SALES_PUR_RETURN_INV.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_ID             IN      SALES_PUR_RETURN_INV.PROVIDER_INV_ID%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE                IN      SALES_PUR_RETURN_INV.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT             IN      SALES_PUR_RETURN_INV.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_DATE           IN      SALES_PUR_RETURN_INV.PROVIDER_INV_DATE%TYPE DEFAULT NULL,
        P_STORE_DATE                  IN      SALES_PUR_RETURN_INV.STORE_DATE%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT            IN      SALES_PUR_RETURN_INV.PAID_CASH_AMOUNT%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN      SALES_PUR_RETURN_INV.BRANCH_ID%TYPE DEFAULT NULL,
        P_PURCHASE_INV_ID             IN      SALES_PUR_RETURN_INV.PURCHASE_INV_ID%TYPE DEFAULT NULL
    );

    PROCEDURE DEL (
        P_INVOICE_ID IN SALES_PUR_RETURN_INV.INVOICE_ID%TYPE
    );

END SALES_PUR_RETURN_INV_TAPI;

/
--------------------------------------------------------
--  DDL for Package SALES_RENT_INV_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_RENT_INV_DTL_TAPI" IS
    PROCEDURE INS (
        P_INVOICE_ID                 IN   SALES_RENT_INV_DTL.INVOICE_ID%TYPE DEFAULT NULL,
        P_PRODUCT_ID                 IN   SALES_RENT_INV_DTL.PRODUCT_ID%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID            IN   SALES_RENT_INV_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_PRICE                      IN   SALES_RENT_INV_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY                   IN   SALES_RENT_INV_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_DISCOUNT_VALUE             IN   SALES_RENT_INV_DTL.DISCOUNT_VALUE%TYPE DEFAULT NULL,
        P_PRE_DISCOUNT_VAT_VALUE     IN   SALES_RENT_INV_DTL.PRE_DISCOUNT_VAT_VALUE%TYPE DEFAULT NULL,
        P_VAT_PERCENTAGE             IN   SALES_RENT_INV_DTL.VAT_PERCENTAGE%TYPE DEFAULT NULL,
        P_TOTAL_PRICE                IN   SALES_RENT_INV_DTL.TOTAL_PRICE%TYPE DEFAULT NULL,
        P_VAT_VALUE                  IN   SALES_RENT_INV_DTL.VAT_VALUE%TYPE DEFAULT NULL,
        P_DISCOUNT_PERCENTAGE        IN   SALES_RENT_INV_DTL.DISCOUNT_PERCENTAGE%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_PRICE  IN   SALES_RENT_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT               IN   SALES_RENT_INV_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL
    );

    PROCEDURE UPD (
        P_DTL_ID                     IN  SALES_RENT_INV_DTL.DTL_ID%TYPE,
        P_INVOICE_ID                 IN  SALES_RENT_INV_DTL.INVOICE_ID%TYPE DEFAULT NULL,
        P_PRODUCT_ID                 IN  SALES_RENT_INV_DTL.PRODUCT_ID%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID            IN  SALES_RENT_INV_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_PRICE                      IN  SALES_RENT_INV_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY                   IN  SALES_RENT_INV_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_DISCOUNT_VALUE             IN  SALES_RENT_INV_DTL.DISCOUNT_VALUE%TYPE DEFAULT NULL,
        P_PRE_DISCOUNT_VAT_VALUE     IN  SALES_RENT_INV_DTL.PRE_DISCOUNT_VAT_VALUE%TYPE DEFAULT NULL,
        P_VAT_PERCENTAGE             IN  SALES_RENT_INV_DTL.VAT_PERCENTAGE%TYPE DEFAULT NULL,
        P_TOTAL_PRICE                IN  SALES_RENT_INV_DTL.TOTAL_PRICE%TYPE DEFAULT NULL,
        P_VAT_VALUE                  IN  SALES_RENT_INV_DTL.VAT_VALUE%TYPE DEFAULT NULL,
        P_DISCOUNT_PERCENTAGE        IN  SALES_RENT_INV_DTL.DISCOUNT_PERCENTAGE%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_PRICE  IN  SALES_RENT_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT               IN  SALES_RENT_INV_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL
    );

    PROCEDURE DEL (
        P_DTL_ID IN SALES_RENT_INV_DTL.DTL_ID%TYPE
    );

END SALES_RENT_INV_DTL_TAPI;

/
--------------------------------------------------------
--  DDL for Package SALES_RENT_INV_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_RENT_INV_TAPI" IS
    PROCEDURE INS (
        P_BANK_ACC_ID                 IN   SALES_RENT_INV.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_ACC_JOURNAL_ID              IN   SALES_RENT_INV.ACC_JOURNAL_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                 IN   SALES_RENT_INV.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                     IN   SALES_RENT_INV.SAFE_ID%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT  IN   SALES_RENT_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_USER_ID                     IN   SALES_RENT_INV.USER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT              IN   SALES_RENT_INV.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_DATE                IN   SALES_RENT_INV.INVOICE_DATE%TYPE DEFAULT NULL,
        P_NOTES                       IN   SALES_RENT_INV.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_TOTAL_AMOUNT        IN   SALES_RENT_INV.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE                IN   SALES_RENT_INV.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_CLIENT_ID                   IN   SALES_RENT_INV.CLIENT_ID%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY              IN   SALES_RENT_INV.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                    IN   SALES_RENT_INV.STORE_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT        IN   SALES_RENT_INV.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                  IN   SALES_RENT_INV.COMPANY_ID%TYPE,
        P_RETURN_DATE                 IN   SALES_RENT_INV.RETURN_DATE%TYPE DEFAULT NULL,
        P_PAID_BANK_AMOUNT            IN   SALES_RENT_INV.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                 IN   SALES_RENT_INV.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT             IN   SALES_RENT_INV.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_TOTAL_VAT                   IN   SALES_RENT_INV.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE                IN   SALES_RENT_INV.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT             IN   SALES_RENT_INV.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_STORE_DATE                  IN   SALES_RENT_INV.STORE_DATE%TYPE DEFAULT NULL,
        P_DELIVERY_DATE               IN   SALES_RENT_INV.DELIVERY_DATE%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT            IN   SALES_RENT_INV.PAID_CASH_AMOUNT%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN      SALES_RENT_INV.BRANCH_ID%TYPE DEFAULT NULL,
        P_INVOICE_NO                  OUT  SALES_RENT_INV.INVOICE_NO%TYPE,
        P_INVOICE_ID                  OUT  SALES_RENT_INV.INVOICE_ID%TYPE
    );

    PROCEDURE UPD (
        P_BANK_ACC_ID                 IN      SALES_RENT_INV.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_ACC_JOURNAL_ID              IN      SALES_RENT_INV.ACC_JOURNAL_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                 IN      SALES_RENT_INV.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                     IN      SALES_RENT_INV.SAFE_ID%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT  IN      SALES_RENT_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_USER_ID                     IN      SALES_RENT_INV.USER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT              IN      SALES_RENT_INV.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_DATE                IN      SALES_RENT_INV.INVOICE_DATE%TYPE DEFAULT NULL,
        P_NOTES                       IN      SALES_RENT_INV.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_ID                  IN      SALES_RENT_INV.INVOICE_ID%TYPE,
        P_INVOICE_TOTAL_AMOUNT        IN      SALES_RENT_INV.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE                IN      SALES_RENT_INV.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_CLIENT_ID                   IN      SALES_RENT_INV.CLIENT_ID%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY              IN      SALES_RENT_INV.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                    IN      SALES_RENT_INV.STORE_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT        IN      SALES_RENT_INV.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                  IN      SALES_RENT_INV.COMPANY_ID%TYPE,
        P_RETURN_DATE                 IN      SALES_RENT_INV.RETURN_DATE%TYPE DEFAULT NULL,
        P_PAID_BANK_AMOUNT            IN      SALES_RENT_INV.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                 IN      SALES_RENT_INV.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT             IN      SALES_RENT_INV.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_NO                  IN OUT  SALES_RENT_INV.INVOICE_NO%TYPE,
        P_TOTAL_VAT                   IN      SALES_RENT_INV.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE                IN      SALES_RENT_INV.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT             IN      SALES_RENT_INV.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_STORE_DATE                  IN      SALES_RENT_INV.STORE_DATE%TYPE DEFAULT NULL,
        P_DELIVERY_DATE               IN      SALES_RENT_INV.DELIVERY_DATE%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN      SALES_RENT_INV.BRANCH_ID%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT            IN      SALES_RENT_INV.PAID_CASH_AMOUNT%TYPE DEFAULT NULL
    );

    PROCEDURE DEL (
        P_INVOICE_ID IN SALES_RENT_INV.INVOICE_ID%TYPE
    );

END SALES_RENT_INV_TAPI;

/
--------------------------------------------------------
--  DDL for Package SALES_RETURN_INV_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_RETURN_INV_DTL_TAPI" is
    type SALES_RETURN_INV_DTL_TAPI_REC is record (
        PRICE                     SALES_RETURN_INV_DTL.PRICE%type,
        QUANTITY                  SALES_RETURN_INV_DTL.QUANTITY%type,
        DISCOUNT_VALUE            SALES_RETURN_INV_DTL.DISCOUNT_VALUE%type,
        PRODUCT_ID                SALES_RETURN_INV_DTL.PRODUCT_ID%type,
        PRE_DISCOUNT_VAT_VALUE    SALES_RETURN_INV_DTL.PRE_DISCOUNT_VAT_VALUE%type,
        INVOICE_ID                SALES_RETURN_INV_DTL.INVOICE_ID%type,
        DTL_ID                    SALES_RETURN_INV_DTL.DTL_ID%type,
        VAT_PERCENTAGE            SALES_RETURN_INV_DTL.VAT_PERCENTAGE%type,
        TOTAL_PRICE               SALES_RETURN_INV_DTL.TOTAL_PRICE%type,
        VAT_VALUE                 SALES_RETURN_INV_DTL.VAT_VALUE%type,
        PRODUCT_UNIT_ID           SALES_RETURN_INV_DTL.PRODUCT_UNIT_ID%type,
        DISCOUNT_PERCENTAGE       SALES_RETURN_INV_DTL.DISCOUNT_PERCENTAGE%type,
        POST_DISCOUNT_TOTAL_PRICE SALES_RETURN_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%type,
        TOTAL_AMOUNT              SALES_RETURN_INV_DTL.TOTAL_AMOUNT%type
    );
    type SALES_RETURN_INV_DTL_TAPI_TAB is
        table of SALES_RETURN_INV_DTL_TAPI_REC;

-- insert
    procedure INSERT_SALES_RETURN_INV_DTL (
        P_DTL_ID                    in OUT SALES_RETURN_INV_DTL.DTL_ID%type,
        P_PRICE                     in SALES_RETURN_INV_DTL.PRICE%type default null,
        P_QUANTITY                  in SALES_RETURN_INV_DTL.QUANTITY%type default null,
        P_DISCOUNT_VALUE            in SALES_RETURN_INV_DTL.DISCOUNT_VALUE%type default null,
        P_PRODUCT_ID                in SALES_RETURN_INV_DTL.PRODUCT_ID%type default null,
        P_PRE_DISCOUNT_VAT_VALUE    in SALES_RETURN_INV_DTL.PRE_DISCOUNT_VAT_VALUE%type default null,
        P_INVOICE_ID                in SALES_RETURN_INV_DTL.INVOICE_ID%type default null,
        P_VAT_PERCENTAGE            in SALES_RETURN_INV_DTL.VAT_PERCENTAGE%type default null,
        P_TOTAL_PRICE               in SALES_RETURN_INV_DTL.TOTAL_PRICE%type default null,
        P_VAT_VALUE                 in SALES_RETURN_INV_DTL.VAT_VALUE%type default null,
        P_PRODUCT_UNIT_ID           in SALES_RETURN_INV_DTL.PRODUCT_UNIT_ID%type default null,
        P_DISCOUNT_PERCENTAGE       in SALES_RETURN_INV_DTL.DISCOUNT_PERCENTAGE%type default null,
        P_POST_DISCOUNT_TOTAL_PRICE in SALES_RETURN_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%type default null,
        P_TOTAL_AMOUNT              in SALES_RETURN_INV_DTL.TOTAL_AMOUNT%type default null
    );
-- update
    procedure UPDATE_SALES_RETURN_INV_DTL (
        P_DTL_ID                    in SALES_RETURN_INV_DTL.DTL_ID%type,
        P_PRICE                     in SALES_RETURN_INV_DTL.PRICE%type default null,
        P_QUANTITY                  in SALES_RETURN_INV_DTL.QUANTITY%type default null,
        P_DISCOUNT_VALUE            in SALES_RETURN_INV_DTL.DISCOUNT_VALUE%type default null,
        P_PRODUCT_ID                in SALES_RETURN_INV_DTL.PRODUCT_ID%type default null,
        P_PRE_DISCOUNT_VAT_VALUE    in SALES_RETURN_INV_DTL.PRE_DISCOUNT_VAT_VALUE%type default null,
        P_INVOICE_ID                in SALES_RETURN_INV_DTL.INVOICE_ID%type default null,
        P_VAT_PERCENTAGE            in SALES_RETURN_INV_DTL.VAT_PERCENTAGE%type default null,
        P_TOTAL_PRICE               in SALES_RETURN_INV_DTL.TOTAL_PRICE%type default null,
        P_VAT_VALUE                 in SALES_RETURN_INV_DTL.VAT_VALUE%type default null,
        P_PRODUCT_UNIT_ID           in SALES_RETURN_INV_DTL.PRODUCT_UNIT_ID%type default null,
        P_DISCOUNT_PERCENTAGE       in SALES_RETURN_INV_DTL.DISCOUNT_PERCENTAGE%type default null,
        P_POST_DISCOUNT_TOTAL_PRICE in SALES_RETURN_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%type default null,
        P_TOTAL_AMOUNT              in SALES_RETURN_INV_DTL.TOTAL_AMOUNT%type default null
    );
-- delete
    procedure DELETE_SALES_RETURN_INV_DTL (
        P_DTL_ID in SALES_RETURN_INV_DTL.DTL_ID%type
    );

end SALES_RETURN_INV_DTL_TAPI;


/
--------------------------------------------------------
--  DDL for Package SALES_RETURN_INV_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SALES_RETURN_INV_TAPI" IS
    PROCEDURE INSERT_SALES_RETURN_INV (
        P_INVOICE_ID                 IN OUT SALES_RETURN_INV.INVOICE_ID%TYPE,
        P_INVOICE_NO                 IN OUT SALES_RETURN_INV.INVOICE_NO%TYPE,
        P_BRANCH_ID                   IN      SALES_RETURN_INV.BRANCH_ID%TYPE DEFAULT NULL,
        P_BANK_ACC_ID                IN SALES_RETURN_INV.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_ACC_JOURNAL_ID             IN SALES_RETURN_INV.ACC_JOURNAL_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                IN SALES_RETURN_INV.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                    IN SALES_RETURN_INV.SAFE_ID%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT IN SALES_RETURN_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_USER_ID                    IN SALES_RETURN_INV.USER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT             IN SALES_RETURN_INV.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_DATE               IN SALES_RETURN_INV.INVOICE_DATE%TYPE DEFAULT NULL,
        P_NOTES                      IN SALES_RETURN_INV.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_TOTAL_AMOUNT       IN SALES_RETURN_INV.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE               IN SALES_RETURN_INV.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_CLIENT_ID                  IN SALES_RETURN_INV.CLIENT_ID%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY             IN SALES_RETURN_INV.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                   IN SALES_RETURN_INV.STORE_ID%TYPE DEFAULT NULL,
        P_SALES_INV_ID               IN SALES_RETURN_INV.SALES_INV_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT       IN SALES_RETURN_INV.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                 IN SALES_RETURN_INV.COMPANY_ID%TYPE,
        P_PAID_BANK_AMOUNT           IN SALES_RETURN_INV.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                IN SALES_RETURN_INV.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT            IN SALES_RETURN_INV.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_TOTAL_VAT                  IN SALES_RETURN_INV.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE               IN SALES_RETURN_INV.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT            IN SALES_RETURN_INV.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_STORE_DATE                 IN SALES_RETURN_INV.STORE_DATE%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT           IN SALES_RETURN_INV.PAID_CASH_AMOUNT%TYPE DEFAULT NULL
    );
-- update
    PROCEDURE UPDATE_SALES_RETURN_INV (
        P_INVOICE_ID                 IN SALES_RETURN_INV.INVOICE_ID%TYPE,
        P_INVOICE_NO                 IN  SALES_RETURN_INV.INVOICE_NO%TYPE,
        P_BRANCH_ID                   IN      SALES_RETURN_INV.BRANCH_ID%TYPE DEFAULT NULL,
        P_BANK_ACC_ID                IN SALES_RETURN_INV.BANK_ACC_ID%TYPE DEFAULT NULL,
        P_ACC_JOURNAL_ID             IN SALES_RETURN_INV.ACC_JOURNAL_ID%TYPE DEFAULT NULL,
        P_PAID_AMOUNT                IN SALES_RETURN_INV.PAID_AMOUNT%TYPE DEFAULT NULL,
        P_SAFE_ID                    IN SALES_RETURN_INV.SAFE_ID%TYPE DEFAULT NULL,
        P_POST_DISCOUNT_TOTAL_AMOUNT IN SALES_RETURN_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_USER_ID                    IN SALES_RETURN_INV.USER_ID%TYPE DEFAULT NULL,
        P_TOTAL_DISCOUNT             IN SALES_RETURN_INV.TOTAL_DISCOUNT%TYPE DEFAULT NULL,
        P_INVOICE_DATE               IN SALES_RETURN_INV.INVOICE_DATE%TYPE DEFAULT NULL,
        P_NOTES                      IN SALES_RETURN_INV.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_TOTAL_AMOUNT       IN SALES_RETURN_INV.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_INVOICE_TYPE               IN SALES_RETURN_INV.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_CLIENT_ID                  IN SALES_RETURN_INV.CLIENT_ID%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY             IN SALES_RETURN_INV.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID                   IN SALES_RETURN_INV.STORE_ID%TYPE DEFAULT NULL,
        P_SALES_INV_ID               IN SALES_RETURN_INV.SALES_INV_ID%TYPE DEFAULT NULL,
        P_PRE_TAX_TOTAL_AMOUNT       IN SALES_RETURN_INV.PRE_TAX_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_COMPANY_ID                 IN SALES_RETURN_INV.COMPANY_ID%TYPE,
        P_PAID_BANK_AMOUNT           IN SALES_RETURN_INV.PAID_BANK_AMOUNT%TYPE DEFAULT NULL,
        P_COST_CTR_ID                IN SALES_RETURN_INV.COST_CTR_ID%TYPE DEFAULT NULL,
        P_CLIENT_DISCOUNT            IN SALES_RETURN_INV.CLIENT_DISCOUNT%TYPE DEFAULT NULL,
        P_TOTAL_VAT                  IN SALES_RETURN_INV.TOTAL_VAT%TYPE DEFAULT NULL,
        P_PAYMENT_TYPE               IN SALES_RETURN_INV.PAYMENT_TYPE%TYPE DEFAULT NULL,
        P_DEFERRED_AMOUNT            IN SALES_RETURN_INV.DEFERRED_AMOUNT%TYPE DEFAULT NULL,
        P_STORE_DATE                 IN SALES_RETURN_INV.STORE_DATE%TYPE DEFAULT NULL,
        P_PAID_CASH_AMOUNT           IN SALES_RETURN_INV.PAID_CASH_AMOUNT%TYPE DEFAULT NULL
    );
-- delete
    PROCEDURE DELETE_SALES_RETURN_INV (
        P_INVOICE_ID IN SALES_RETURN_INV.INVOICE_ID%TYPE
    );

END SALES_RETURN_INV_TAPI;

/
--------------------------------------------------------
--  DDL for Package SETUP_APP_ROLE_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SETUP_APP_ROLE_TAPI" is
--------------------------------------------------------------
-- create procedure for table SETUP_APP_ROLE
--------------------------------------------------------------
   procedure INSERT_SETUP_APP_ROLE (
      P_ROLE_ID      in OUT SETUP_APP_ROLE.ROLE_ID%TYPE                           ,
      P_ROLE_NAME    in SETUP_APP_ROLE.ROLE_NAME%TYPE                         default null,
      P_CREATED_BY   in SETUP_APP_ROLE.CREATED_BY%TYPE                        default null,
      P_CREATED_AT   in SETUP_APP_ROLE.CREATED_AT%TYPE                        default null,
      P_COMPANY_ID   in SETUP_APP_ROLE.COMPANY_ID%TYPE                        default null,
      P_ROLE_NAME_EN in SETUP_APP_ROLE.ROLE_NAME_EN%TYPE                      default null
   );
--------------------------------------------------------------
-- update procedure for table SETUP_APP_ROLE
--------------------------------------------------------------
   procedure UPDATE_SETUP_APP_ROLE (
      P_ROLE_ID      in SETUP_APP_ROLE.ROLE_ID%TYPE         ,
      P_ROLE_NAME    in SETUP_APP_ROLE.ROLE_NAME%TYPE                          default null,
      P_MODIFIED_BY  in SETUP_APP_ROLE.MODIFIED_BY%TYPE                        default null,
      P_MODIFIED_AT  in SETUP_APP_ROLE.MODIFIED_AT%TYPE                       default null,
      P_COMPANY_ID   in SETUP_APP_ROLE.COMPANY_ID%TYPE                         default null,
      P_ROLE_NAME_EN in SETUP_APP_ROLE.ROLE_NAME_EN%TYPE                       default null
   );
--------------------------------------------------------------
-- delete procedure for table SETUP_APP_ROLE
--------------------------------------------------------------
   procedure DELETE_SETUP_APP_ROLE (
      P_ROLE_ID    IN  SETUP_APP_ROLE.ROLE_ID%TYPE  
   );

end SETUP_APP_ROLE_TAPI;


/
--------------------------------------------------------
--  DDL for Package SETUP_APP_USER_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SETUP_APP_USER_TAPI" is
--------------------------------------------------------------
-- create procedure for table SETUP_APP_USER
--------------------------------------------------------------
   procedure INSERT_SETUP_APP_USER (
      P_USER_ID     in OUT SETUP_APP_USER.USER_ID%TYPE                            ,
      P_USER_NAME   in SETUP_APP_USER.USER_NAME%TYPE                          default null,
      P_PASS        in SETUP_APP_USER.PASS%TYPE                               default null,
      P_CREATED_BY  in SETUP_APP_USER.CREATED_BY%TYPE                         default null,
      P_CREATED_AT  in SETUP_APP_USER.CREATED_AT%TYPE                        default null,
      P_STATUS      in SETUP_APP_USER.STATUS%TYPE                             default null,
      P_USER_TYPE   in SETUP_APP_USER.USER_TYPE%TYPE                          default null,
      P_COMPANY_ID  in SETUP_APP_USER.COMPANY_ID%TYPE                         default null
   );
--------------------------------------------------------------
-- update procedure for table SETUP_APP_USER
--------------------------------------------------------------
   procedure UPDATE_SETUP_APP_USER (
      P_USER_ID     in SETUP_APP_USER.USER_ID%TYPE    ,     
      P_USER_NAME   in SETUP_APP_USER.USER_NAME%TYPE                           default null,
      P_PASS        in SETUP_APP_USER.PASS%TYPE                                default null,
      P_MODIFIED_BY in SETUP_APP_USER.MODIFIED_BY%TYPE                         default null,
      P_MODIFIED_AT in SETUP_APP_USER.MODIFIED_AT%TYPE                         default null,
      P_STATUS      in SETUP_APP_USER.STATUS%TYPE                              default null,
      P_USER_TYPE   in SETUP_APP_USER.USER_TYPE%TYPE                           default null,
      P_COMPANY_ID  in SETUP_APP_USER.COMPANY_ID%TYPE                          default null
   );
--------------------------------------------------------------
-- delete procedure for table SETUP_APP_USER
--------------------------------------------------------------
   procedure DELETE_SETUP_APP_USER (
      P_USER_ID     in SETUP_APP_USER.USER_ID%TYPE 
   );


end SETUP_APP_USER_TAPI;


/
--------------------------------------------------------
--  DDL for Package SETUP_PROD_GROUP_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SETUP_PROD_GROUP_TAPI" is
--------------------------------------------------------------
-- create procedure for table SETUP_PROD_GROUP
--------------------------------------------------------------
   procedure INSERT_SETUP_PROD_GROUP (
      P_GROUP_ID   in OUT SETUP_PROD_GROUP.GROUP_ID  %TYPE                       ,
      P_NAME_AR    in SETUP_PROD_GROUP.NAME_AR   %TYPE                        default null,
      P_NAME_EN    in SETUP_PROD_GROUP.NAME_EN   %TYPE                        default null,
      P_STATUS     in SETUP_PROD_GROUP.STATUS    %TYPE                        default null,
      P_COMPANY_ID in SETUP_PROD_GROUP.COMPANY_ID%TYPE
   );
--------------------------------------------------------------
-- update procedure for table SETUP_PROD_GROUP
--------------------------------------------------------------
   procedure UPDATE_SETUP_PROD_GROUP (
      P_GROUP_ID   in SETUP_PROD_GROUP.GROUP_ID%TYPE  ,
      P_NAME_AR    in SETUP_PROD_GROUP.NAME_AR%TYPE                       default null,
      P_NAME_EN    in SETUP_PROD_GROUP.NAME_EN%TYPE                       default null,
      P_STATUS     in SETUP_PROD_GROUP.STATUS%TYPE                       default null,
      P_COMPANY_ID in SETUP_PROD_GROUP.COMPANY_ID%TYPE
   );
--------------------------------------------------------------
-- delete procedure for table SETUP_PROD_GROUP
--------------------------------------------------------------
   procedure DELETE_SETUP_PROD_GROUP (
      P_GROUP_ID   in SETUP_PROD_GROUP.GROUP_ID  %TYPE 
   );

end SETUP_PROD_GROUP_TAPI;


/
--------------------------------------------------------
--  DDL for Package SETUP_SAFE_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SETUP_SAFE_TAPI" IS
--------------------------------------------------------------
-- CREATE PROCEDURE FOR TABLE SETUP_SAFE
--------------------------------------------------------------
   PROCEDURE INSERT_SETUP_SAFE (
      P_SAFE_ID          IN OUT SETUP_SAFE.SAFE_ID%TYPE                      ,
      P_SAFE_NAME_AR        IN SETUP_SAFE.SAFE_NAME_AR%TYPE                       DEFAULT NULL,
      P_SAFE_NAME_EN        IN SETUP_SAFE.SAFE_NAME_EN%TYPE                       DEFAULT NULL,
      P_BRANCH_ID        IN SETUP_SAFE.BRANCH_ID       %TYPE                       DEFAULT NULL,
      P_ACCOUNT_ID       IN SETUP_SAFE.ACCOUNT_ID      %TYPE                       DEFAULT NULL,
      P_NOTE             IN SETUP_SAFE.NOTE            %TYPE                       DEFAULT NULL,
      P_IS_DEFAULT       IN SETUP_SAFE.IS_DEFAULT      %TYPE                       DEFAULT NULL,
      P_FOR_ALL_BRANCHES IN SETUP_SAFE.FOR_ALL_BRANCHES%TYPE                       DEFAULT NULL,
      P_STATUS           IN SETUP_SAFE.STATUS          %TYPE                       DEFAULT NULL,
      P_COMPANY_ID       IN SETUP_SAFE.COMPANY_ID      %TYPE
   );
--------------------------------------------------------------
-- UPDATE PROCEDURE FOR TABLE SETUP_SAFE
--------------------------------------------------------------
   PROCEDURE UPDATE_SETUP_SAFE (
      P_SAFE_ID          IN SETUP_SAFE.SAFE_ID         %TYPE                      ,
      P_SAFE_NAME_AR        IN SETUP_SAFE.SAFE_NAME_AR%TYPE                       DEFAULT NULL,
      P_SAFE_NAME_EN        IN SETUP_SAFE.SAFE_NAME_EN%TYPE                       DEFAULT NULL,
      P_BRANCH_ID        IN SETUP_SAFE.BRANCH_ID       %TYPE                       DEFAULT NULL,
      P_ACCOUNT_ID       IN SETUP_SAFE.ACCOUNT_ID      %TYPE                       DEFAULT NULL,
      P_NOTE             IN SETUP_SAFE.NOTE            %TYPE                       DEFAULT NULL,
      P_IS_DEFAULT       IN SETUP_SAFE.IS_DEFAULT      %TYPE                       DEFAULT NULL,
      P_FOR_ALL_BRANCHES IN SETUP_SAFE.FOR_ALL_BRANCHES%TYPE                       DEFAULT NULL,
      P_STATUS           IN SETUP_SAFE.STATUS          %TYPE                       DEFAULT NULL,
      P_COMPANY_ID       IN SETUP_SAFE.COMPANY_ID      %TYPE
   );
--------------------------------------------------------------
-- DELETE PROCEDURE FOR TABLE SETUP_SAFE
--------------------------------------------------------------
   PROCEDURE DELETE_SETUP_SAFE (
      P_SAFE_ID          IN SETUP_SAFE.SAFE_ID%TYPE 
   );


END SETUP_SAFE_TAPI;

/
--------------------------------------------------------
--  DDL for Package SETUP_STORE_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SETUP_STORE_TAPI" is
--------------------------------------------------------------
-- create procedure for table SETUP_STORE
--------------------------------------------------------------
   procedure INSERT_SETUP_STORE (
      P_STORE_ID      in OUT SETUP_STORE.STORE_ID%TYPE                       ,
      P_STORE_NAME    in SETUP_STORE.STORE_NAME_ar%TYPE                       default null,
      P_BRANCH_ID     in SETUP_STORE.BRANCH_ID%TYPE                       default null,
      P_NOTE          in SETUP_STORE.NOTE%TYPE                       default null,
      P_STATUS        in SETUP_STORE.STATUS%TYPE                       default null,
      P_COMPANY_ID    in SETUP_STORE.COMPANY_ID%TYPE,
      P_STORE_NAME_EN in SETUP_STORE.STORE_NAME_EN%TYPE                       default null
   );
--------------------------------------------------------------
-- update procedure for table SETUP_STORE
--------------------------------------------------------------
   procedure UPDATE_SETUP_STORE (
       P_STORE_ID      in SETUP_STORE.STORE_ID%TYPE                       ,
      P_STORE_NAME    in SETUP_STORE.STORE_NAME_ar%TYPE                       default null,
      P_BRANCH_ID     in SETUP_STORE.BRANCH_ID%TYPE                       default null,
      P_NOTE          in SETUP_STORE.NOTE%TYPE                       default null,
      P_STATUS        in SETUP_STORE.STATUS%TYPE                       default null,
      P_COMPANY_ID    in SETUP_STORE.COMPANY_ID%TYPE,
      P_STORE_NAME_EN in SETUP_STORE.STORE_NAME_EN%TYPE                       default null
   );
--------------------------------------------------------------
-- delete procedure for table SETUP_STORE
--------------------------------------------------------------
   procedure DELETE_SETUP_STORE (
      P_STORE_ID      in SETUP_STORE.STORE_ID%TYPE  
   );

end SETUP_STORE_TAPI;

/
--------------------------------------------------------
--  DDL for Package SETUP_TAX_GROUP_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SETUP_TAX_GROUP_TAPI" is
--------------------------------------------------------------
-- create procedure for table SETUP_TAX_GROUP
--------------------------------------------------------------
   procedure INSERT_SETUP_TAX_GROUP (
      P_GROUP_ID    in OUT SETUP_TAX_GROUP.GROUP_ID   %TYPE                     ,
      P_NAME_AR     in SETUP_TAX_GROUP.NAME_AR    %TYPE                      default null,
      P_NAME_EN     in SETUP_TAX_GROUP.NAME_EN    %TYPE                      default null,
      P_GROUP_VALUE in SETUP_TAX_GROUP.GROUP_VALUE%TYPE                      default null,
      P_STATUS      in SETUP_TAX_GROUP.STATUS     %TYPE                      default null,
      P_COMPANY_ID  in SETUP_TAX_GROUP.COMPANY_ID %TYPE
   );
--------------------------------------------------------------
-- update procedure for table SETUP_TAX_GROUP
--------------------------------------------------------------
   procedure UPDATE_SETUP_TAX_GROUP (
      P_GROUP_ID    in SETUP_TAX_GROUP.GROUP_ID   %TYPE                     ,
      P_NAME_AR     in SETUP_TAX_GROUP.NAME_AR    %TYPE                      default null,
      P_NAME_EN     in SETUP_TAX_GROUP.NAME_EN    %TYPE                      default null,
      P_GROUP_VALUE in SETUP_TAX_GROUP.GROUP_VALUE%TYPE                      default null,
      P_STATUS      in SETUP_TAX_GROUP.STATUS     %TYPE                      default null,
      P_COMPANY_ID  in SETUP_TAX_GROUP.COMPANY_ID %TYPE
   );
--------------------------------------------------------------
-- delete procedure for table SETUP_TAX_GROUP
--------------------------------------------------------------
   procedure DELETE_SETUP_TAX_GROUP (
      P_GROUP_ID    in SETUP_TAX_GROUP.GROUP_ID   %TYPE  
   );


end SETUP_TAX_GROUP_TAPI;


/
--------------------------------------------------------
--  DDL for Package STORE_FIRST_PERIOD_STOCK_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "STORE_FIRST_PERIOD_STOCK_DTL_TAPI" IS
    PROCEDURE INS (
        P_INVOICE_ID       IN  STORE_FIRST_PERIOD_STOCK_DTL.INVOICE_ID%TYPE DEFAULT NULL,
        P_PRICE            IN  STORE_FIRST_PERIOD_STOCK_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY         IN  STORE_FIRST_PERIOD_STOCK_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID  IN  STORE_FIRST_PERIOD_STOCK_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_PRODUCT_ID       IN  STORE_FIRST_PERIOD_STOCK_DTL.PRODUCT_ID%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT     IN  STORE_FIRST_PERIOD_STOCK_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL
    );

    PROCEDURE UPD (
        P_INVOICE_ID       IN  STORE_FIRST_PERIOD_STOCK_DTL.INVOICE_ID%TYPE DEFAULT NULL,
        P_DTL_ID           IN  STORE_FIRST_PERIOD_STOCK_DTL.DTL_ID%TYPE,
        P_PRICE            IN  STORE_FIRST_PERIOD_STOCK_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY         IN  STORE_FIRST_PERIOD_STOCK_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID  IN  STORE_FIRST_PERIOD_STOCK_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_PRODUCT_ID       IN  STORE_FIRST_PERIOD_STOCK_DTL.PRODUCT_ID%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT     IN  STORE_FIRST_PERIOD_STOCK_DTL.TOTAL_AMOUNT%TYPE DEFAULT NULL
    );

    PROCEDURE DEL (
        P_DTL_ID IN STORE_FIRST_PERIOD_STOCK_DTL.DTL_ID%TYPE
    );

END STORE_FIRST_PERIOD_STOCK_DTL_TAPI;

/
--------------------------------------------------------
--  DDL for Package STORE_FIRST_PERIOD_STOCK_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "STORE_FIRST_PERIOD_STOCK_TAPI" IS
    PROCEDURE INS (
        P_SAFE_ID               IN   STORE_FIRST_PERIOD_STOCK.SAFE_ID%TYPE DEFAULT NULL,
        P_USER_ID               IN   STORE_FIRST_PERIOD_STOCK.USER_ID%TYPE DEFAULT NULL,
        P_COST_CTR_ID           IN   STORE_FIRST_PERIOD_STOCK.COST_CTR_ID%TYPE DEFAULT NULL,
        P_PROVIDER_ID           IN   STORE_FIRST_PERIOD_STOCK.PROVIDER_ID%TYPE DEFAULT NULL,
        P_PROVIDER_INV_ID       IN   STORE_FIRST_PERIOD_STOCK.PROVIDER_INV_ID%TYPE DEFAULT NULL,
        P_NOTES                 IN   STORE_FIRST_PERIOD_STOCK.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_DATE          IN   STORE_FIRST_PERIOD_STOCK.INVOICE_DATE%TYPE DEFAULT NULL,
        P_INVOICE_TOTAL_AMOUNT  IN   STORE_FIRST_PERIOD_STOCK.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_DATE     IN   STORE_FIRST_PERIOD_STOCK.PROVIDER_INV_DATE%TYPE DEFAULT NULL,
        P_STORE_DATE            IN   STORE_FIRST_PERIOD_STOCK.STORE_DATE%TYPE DEFAULT NULL,
        P_INVOICE_TYPE          IN   STORE_FIRST_PERIOD_STOCK.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY        IN   STORE_FIRST_PERIOD_STOCK.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID              IN   STORE_FIRST_PERIOD_STOCK.STORE_ID%TYPE DEFAULT NULL,
        P_COMPANY_ID            IN   STORE_FIRST_PERIOD_STOCK.COMPANY_ID%TYPE,
        P_INVOICE_NO            OUT  STORE_FIRST_PERIOD_STOCK.INVOICE_NO%TYPE,
        P_BRANCH_ID                   IN      STORE_FIRST_PERIOD_STOCK.BRANCH_ID%TYPE DEFAULT NULL,
        P_INVOICE_ID            OUT  STORE_FIRST_PERIOD_STOCK.INVOICE_ID%TYPE
    );

    PROCEDURE UPD (
        P_SAFE_ID               IN      STORE_FIRST_PERIOD_STOCK.SAFE_ID%TYPE DEFAULT NULL,
        P_USER_ID               IN      STORE_FIRST_PERIOD_STOCK.USER_ID%TYPE DEFAULT NULL,
        P_COST_CTR_ID           IN      STORE_FIRST_PERIOD_STOCK.COST_CTR_ID%TYPE DEFAULT NULL,
        P_PROVIDER_ID           IN      STORE_FIRST_PERIOD_STOCK.PROVIDER_ID%TYPE DEFAULT NULL,
        P_PROVIDER_INV_ID       IN      STORE_FIRST_PERIOD_STOCK.PROVIDER_INV_ID%TYPE DEFAULT NULL,
        P_NOTES                 IN      STORE_FIRST_PERIOD_STOCK.NOTES%TYPE DEFAULT NULL,
        P_INVOICE_DATE          IN      STORE_FIRST_PERIOD_STOCK.INVOICE_DATE%TYPE DEFAULT NULL,
        P_INVOICE_TOTAL_AMOUNT  IN      STORE_FIRST_PERIOD_STOCK.INVOICE_TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_PROVIDER_INV_DATE     IN      STORE_FIRST_PERIOD_STOCK.PROVIDER_INV_DATE%TYPE DEFAULT NULL,
        P_STORE_DATE            IN      STORE_FIRST_PERIOD_STOCK.STORE_DATE%TYPE DEFAULT NULL,
        P_INVOICE_TYPE          IN      STORE_FIRST_PERIOD_STOCK.INVOICE_TYPE%TYPE DEFAULT NULL,
        P_TOTAL_QUANTITY        IN      STORE_FIRST_PERIOD_STOCK.TOTAL_QUANTITY%TYPE DEFAULT NULL,
        P_STORE_ID              IN      STORE_FIRST_PERIOD_STOCK.STORE_ID%TYPE DEFAULT NULL,
        P_COMPANY_ID            IN      STORE_FIRST_PERIOD_STOCK.COMPANY_ID%TYPE,
        P_INVOICE_NO            IN OUT  STORE_FIRST_PERIOD_STOCK.INVOICE_NO%TYPE,
        P_BRANCH_ID                   IN      STORE_FIRST_PERIOD_STOCK.BRANCH_ID%TYPE DEFAULT NULL,
        P_INVOICE_ID            IN      STORE_FIRST_PERIOD_STOCK.INVOICE_ID%TYPE
    );

    PROCEDURE DEL (
        P_INVOICE_ID IN STORE_FIRST_PERIOD_STOCK.INVOICE_ID%TYPE
    );

END STORE_FIRST_PERIOD_STOCK_TAPI;

/
--------------------------------------------------------
--  DDL for Package STORE_STOCKIN_ORDER_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "STORE_STOCKIN_ORDER_DTL_TAPI" IS
    TYPE STORE_STOCKIN_ORDER_DTL_TAPI_REC IS RECORD (
        TOTAL           STORE_STOCKIN_ORDER_DTL.TOTAL%TYPE,
        DTL_ID          STORE_STOCKIN_ORDER_DTL.DTL_ID%TYPE,
        ORDER_ID        STORE_STOCKIN_ORDER_DTL.ORDER_ID%TYPE,
        PRICE           STORE_STOCKIN_ORDER_DTL.PRICE%TYPE,
        QUANTITY        STORE_STOCKIN_ORDER_DTL.QUANTITY%TYPE,
        PRODUCT_UNIT_ID STORE_STOCKIN_ORDER_DTL.PRODUCT_UNIT_ID%TYPE,
        PRODUCT_ID      STORE_STOCKIN_ORDER_DTL.PRODUCT_ID%TYPE
    );
    TYPE STORE_STOCKIN_ORDER_DTL_TAPI_TAB IS
        TABLE OF STORE_STOCKIN_ORDER_DTL_TAPI_REC;

-- insert
    PROCEDURE INSERT_STORE_STOCKIN_ORDER_DTL (
        P_DTL_ID          IN OUT STORE_STOCKIN_ORDER_DTL.DTL_ID%TYPE,
        P_TOTAL           IN STORE_STOCKIN_ORDER_DTL.TOTAL%TYPE DEFAULT NULL,
        P_ORDER_ID        IN STORE_STOCKIN_ORDER_DTL.ORDER_ID%TYPE DEFAULT NULL,
        P_PRICE           IN STORE_STOCKIN_ORDER_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY        IN STORE_STOCKIN_ORDER_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID IN STORE_STOCKIN_ORDER_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_PRODUCT_ID      IN STORE_STOCKIN_ORDER_DTL.PRODUCT_ID%TYPE DEFAULT NULL
    );
-- update
    PROCEDURE UPDATE_STORE_STOCKIN_ORDER_DTL (
        P_DTL_ID          IN STORE_STOCKIN_ORDER_DTL.DTL_ID%TYPE,
        P_TOTAL           IN STORE_STOCKIN_ORDER_DTL.TOTAL%TYPE DEFAULT NULL,
        P_ORDER_ID        IN STORE_STOCKIN_ORDER_DTL.ORDER_ID%TYPE DEFAULT NULL,
        P_PRICE           IN STORE_STOCKIN_ORDER_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY        IN STORE_STOCKIN_ORDER_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID IN STORE_STOCKIN_ORDER_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_PRODUCT_ID      IN STORE_STOCKIN_ORDER_DTL.PRODUCT_ID%TYPE DEFAULT NULL
    );
-- delete
    PROCEDURE DELETE_STORE_STOCKIN_ORDER_DTL (
        P_DTL_ID IN STORE_STOCKIN_ORDER_DTL.DTL_ID%TYPE
    );

END STORE_STOCKIN_ORDER_DTL_TAPI;


/
--------------------------------------------------------
--  DDL for Package STORE_STOCKIN_ORDER_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "STORE_STOCKIN_ORDER_TAPI" IS
    PROCEDURE INSERT_STORE_STOCKIN_ORDER (
        P_ORDER_ID         IN OUT STORE_STOCKIN_ORDER.ORDER_ID%TYPE,
        P_ORDER_NO          IN OUT STORE_STOCKIN_ORDER.ORDER_NO%TYPE,
        P_ACC_JOURNAL_ID   IN STORE_STOCKIN_ORDER.ACC_JOURNAL_ID%TYPE DEFAULT NULL,
        P_ORDER_DATE       IN STORE_STOCKIN_ORDER.ORDER_DATE%TYPE DEFAULT NULL,
        P_ACCOUNT_ID       IN STORE_STOCKIN_ORDER.ACCOUNT_ID%TYPE DEFAULT NULL,
        P_USER_ID          IN STORE_STOCKIN_ORDER.USER_ID%TYPE DEFAULT NULL,
        P_COST_CTR_ID      IN STORE_STOCKIN_ORDER.COST_CTR_ID%TYPE DEFAULT NULL,
        P_NOTES            IN STORE_STOCKIN_ORDER.NOTES%TYPE DEFAULT NULL,
        P_STORE_ID         IN STORE_STOCKIN_ORDER.STORE_ID%TYPE DEFAULT NULL,
        P_REF_ID           IN STORE_STOCKIN_ORDER.REF_ID%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT     IN STORE_STOCKIN_ORDER.TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_ACCOUNTABLE      IN STORE_STOCKIN_ORDER.ACCOUNTABLE%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN      STORE_STOCKIN_ORDER.BRANCH_ID%TYPE DEFAULT NULL,
        P_COMPANY_ID       IN STORE_STOCKIN_ORDER.COMPANY_ID%TYPE
    );
-- update
    PROCEDURE UPDATE_STORE_STOCKIN_ORDER (
        P_ORDER_ID         IN STORE_STOCKIN_ORDER.ORDER_ID%TYPE,
        P_ORDER_NO          IN  STORE_STOCKIN_ORDER.ORDER_NO%TYPE,
        P_ACC_JOURNAL_ID   IN STORE_STOCKIN_ORDER.ACC_JOURNAL_ID%TYPE DEFAULT NULL,
        P_ORDER_DATE       IN STORE_STOCKIN_ORDER.ORDER_DATE%TYPE DEFAULT NULL,
        P_ACCOUNT_ID       IN STORE_STOCKIN_ORDER.ACCOUNT_ID%TYPE DEFAULT NULL,
        P_USER_ID          IN STORE_STOCKIN_ORDER.USER_ID%TYPE DEFAULT NULL,
        P_COST_CTR_ID      IN STORE_STOCKIN_ORDER.COST_CTR_ID%TYPE DEFAULT NULL,
        P_NOTES            IN STORE_STOCKIN_ORDER.NOTES%TYPE DEFAULT NULL,
        P_STORE_ID         IN STORE_STOCKIN_ORDER.STORE_ID%TYPE DEFAULT NULL,
        P_REF_ID           IN STORE_STOCKIN_ORDER.REF_ID%TYPE DEFAULT NULL,
        P_TOTAL_AMOUNT     IN STORE_STOCKIN_ORDER.TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_ACCOUNTABLE      IN STORE_STOCKIN_ORDER.ACCOUNTABLE%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN      STORE_STOCKIN_ORDER.BRANCH_ID%TYPE DEFAULT NULL,
        P_COMPANY_ID       IN STORE_STOCKIN_ORDER.COMPANY_ID%TYPE
    );
-- delete
    PROCEDURE DELETE_STORE_STOCKIN_ORDER (
        P_ORDER_ID IN STORE_STOCKIN_ORDER.ORDER_ID%TYPE
    );

END STORE_STOCKIN_ORDER_TAPI;

/
--------------------------------------------------------
--  DDL for Package STORE_STOCKOUT_ORDER_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "STORE_STOCKOUT_ORDER_DTL_TAPI" IS

    PROCEDURE INS (
        P_TOTAL            IN  STORE_STOCKOUT_ORDER_DTL.TOTAL%TYPE DEFAULT NULL,
        P_ORDER_ID         IN  STORE_STOCKOUT_ORDER_DTL.ORDER_ID%TYPE DEFAULT NULL,
        P_PRICE            IN  STORE_STOCKOUT_ORDER_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY         IN  STORE_STOCKOUT_ORDER_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID  IN  STORE_STOCKOUT_ORDER_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_PRODUCT_ID       IN  STORE_STOCKOUT_ORDER_DTL.PRODUCT_ID%TYPE DEFAULT NULL
    );
    
    PROCEDURE UPD (
        P_TOTAL            IN  STORE_STOCKOUT_ORDER_DTL.TOTAL%TYPE DEFAULT NULL,
        P_DTL_ID           IN  STORE_STOCKOUT_ORDER_DTL.DTL_ID%TYPE,
        P_ORDER_ID         IN  STORE_STOCKOUT_ORDER_DTL.ORDER_ID%TYPE DEFAULT NULL,
        P_PRICE            IN  STORE_STOCKOUT_ORDER_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY         IN  STORE_STOCKOUT_ORDER_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID  IN  STORE_STOCKOUT_ORDER_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_PRODUCT_ID       IN  STORE_STOCKOUT_ORDER_DTL.PRODUCT_ID%TYPE DEFAULT NULL
    );
    
    PROCEDURE DEL (
        P_DTL_ID IN STORE_STOCKOUT_ORDER_DTL.DTL_ID%TYPE
    );

END STORE_STOCKOUT_ORDER_DTL_TAPI;

/
--------------------------------------------------------
--  DDL for Package STORE_STOCKOUT_ORDER_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "STORE_STOCKOUT_ORDER_TAPI" IS
    PROCEDURE INS (
        P_NOTES           IN   STORE_STOCKOUT_ORDER.NOTES%TYPE DEFAULT NULL,
        P_ORDER_DATE      IN   STORE_STOCKOUT_ORDER.ORDER_DATE%TYPE DEFAULT NULL,
        P_ACCOUNT_ID      IN   STORE_STOCKOUT_ORDER.ACCOUNT_ID%TYPE DEFAULT NULL,
        P_USER_ID         IN   STORE_STOCKOUT_ORDER.USER_ID%TYPE DEFAULT NULL,
        P_STORE_ID        IN   STORE_STOCKOUT_ORDER.STORE_ID%TYPE DEFAULT NULL,
        P_COST_CTR_ID     IN   STORE_STOCKOUT_ORDER.COST_CTR_ID%TYPE DEFAULT NULL,
        P_REF_ID          IN   STORE_STOCKOUT_ORDER.REF_ID%TYPE DEFAULT NULL,
        P_COMPANY_ID      IN   STORE_STOCKOUT_ORDER.COMPANY_ID%TYPE,
        P_TOTAL_AMOUNT    IN   STORE_STOCKOUT_ORDER.TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_ACCOUNTABLE     IN   STORE_STOCKOUT_ORDER.ACCOUNTABLE%TYPE DEFAULT NULL,
        P_ORDER_NO        OUT  STORE_STOCKOUT_ORDER.ORDER_NO%TYPE,
        P_BRANCH_ID                   IN      STORE_STOCKOUT_ORDER.BRANCH_ID%TYPE DEFAULT NULL,
        P_ORDER_ID        OUT  STORE_STOCKOUT_ORDER.ORDER_ID%TYPE
    );

    PROCEDURE UPD (
        P_NOTES           IN      STORE_STOCKOUT_ORDER.NOTES%TYPE DEFAULT NULL,
        P_ORDER_ID        IN      STORE_STOCKOUT_ORDER.ORDER_ID%TYPE,
        P_ORDER_NO        IN OUT  STORE_STOCKOUT_ORDER.ORDER_NO%TYPE,
        P_ORDER_DATE      IN      STORE_STOCKOUT_ORDER.ORDER_DATE%TYPE DEFAULT NULL,
        P_ACCOUNT_ID      IN      STORE_STOCKOUT_ORDER.ACCOUNT_ID%TYPE DEFAULT NULL,
        P_USER_ID         IN      STORE_STOCKOUT_ORDER.USER_ID%TYPE DEFAULT NULL,
        P_STORE_ID        IN      STORE_STOCKOUT_ORDER.STORE_ID%TYPE DEFAULT NULL,
        P_COST_CTR_ID     IN      STORE_STOCKOUT_ORDER.COST_CTR_ID%TYPE DEFAULT NULL,
        P_REF_ID          IN      STORE_STOCKOUT_ORDER.REF_ID%TYPE DEFAULT NULL,
        P_COMPANY_ID      IN      STORE_STOCKOUT_ORDER.COMPANY_ID%TYPE,
        P_TOTAL_AMOUNT    IN      STORE_STOCKOUT_ORDER.TOTAL_AMOUNT%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN      STORE_STOCKOUT_ORDER.BRANCH_ID%TYPE DEFAULT NULL,
        P_ACCOUNTABLE     IN      STORE_STOCKOUT_ORDER.ACCOUNTABLE%TYPE DEFAULT NULL
    );

    PROCEDURE DEL (
        P_ORDER_ID IN STORE_STOCKOUT_ORDER.ORDER_ID%TYPE
    );

END STORE_STOCKOUT_ORDER_TAPI;

/
--------------------------------------------------------
--  DDL for Package STORE_TRANSFER_DTL_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "STORE_TRANSFER_DTL_TAPI" IS
    TYPE STORE_TRANSFER_DTL_TAPI_REC IS RECORD (
        DTL_ID          STORE_TRANSFER_DTL.DTL_ID%TYPE,
        PRICE           STORE_TRANSFER_DTL.PRICE%TYPE,
        QUANTITY        STORE_TRANSFER_DTL.QUANTITY%TYPE,
        TRANSFER_ID     STORE_TRANSFER_DTL.TRANSFER_ID%TYPE,
        PRODUCT_UNIT_ID STORE_TRANSFER_DTL.PRODUCT_UNIT_ID%TYPE,
        PRODUCT_ID      STORE_TRANSFER_DTL.PRODUCT_ID%TYPE
    );
    TYPE STORE_TRANSFER_DTL_TAPI_TAB IS
        TABLE OF STORE_TRANSFER_DTL_TAPI_REC;

-- insert
    PROCEDURE INSERT_STORE_TRANSFER_DTL (
        P_DTL_ID          IN OUT STORE_TRANSFER_DTL.DTL_ID%TYPE,
        P_PRICE           IN STORE_TRANSFER_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY        IN STORE_TRANSFER_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_TRANSFER_ID     IN STORE_TRANSFER_DTL.TRANSFER_ID%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID IN STORE_TRANSFER_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_PRODUCT_ID      IN STORE_TRANSFER_DTL.PRODUCT_ID%TYPE DEFAULT NULL
    );
-- update
    PROCEDURE UPDATE_STORE_TRANSFER_DTL (
        P_DTL_ID          IN STORE_TRANSFER_DTL.DTL_ID%TYPE,
        P_PRICE           IN STORE_TRANSFER_DTL.PRICE%TYPE DEFAULT NULL,
        P_QUANTITY        IN STORE_TRANSFER_DTL.QUANTITY%TYPE DEFAULT NULL,
        P_TRANSFER_ID     IN STORE_TRANSFER_DTL.TRANSFER_ID%TYPE DEFAULT NULL,
        P_PRODUCT_UNIT_ID IN STORE_TRANSFER_DTL.PRODUCT_UNIT_ID%TYPE DEFAULT NULL,
        P_PRODUCT_ID      IN STORE_TRANSFER_DTL.PRODUCT_ID%TYPE DEFAULT NULL
    );
-- delete
    PROCEDURE DELETE_STORE_TRANSFER_DTL (
        P_DTL_ID IN STORE_TRANSFER_DTL.DTL_ID%TYPE
    );

END STORE_TRANSFER_DTL_TAPI;


/
--------------------------------------------------------
--  DDL for Package STORE_TRANSFER_TAPI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "STORE_TRANSFER_TAPI" IS
    PROCEDURE INSERT_STORE_TRANSFER (
        P_TRANSFER_ID   IN OUT STORE_TRANSFER.TRANSFER_ID%TYPE,
        P_TRANSFER_NO   IN OUT STORE_TRANSFER.TRANSFER_NO%TYPE,
        P_TRANSFER_BY   IN STORE_TRANSFER.TRANSFER_BY%TYPE DEFAULT NULL,
        P_FROM_STORE_ID IN STORE_TRANSFER.FROM_STORE_ID%TYPE DEFAULT NULL,
        P_TO_STORE_ID   IN STORE_TRANSFER.TO_STORE_ID%TYPE DEFAULT NULL,
        P_RECEIVE_DATE  IN STORE_TRANSFER.RECEIVE_DATE%TYPE DEFAULT NULL,
        P_HAS_RECEIVED  IN STORE_TRANSFER.HAS_RECEIVED%TYPE DEFAULT NULL,
        P_TRANSFER_DATE IN STORE_TRANSFER.TRANSFER_DATE%TYPE DEFAULT NULL,
        P_RECEIVED_BY   IN STORE_TRANSFER.RECEIVED_BY%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN      STORE_TRANSFER.BRANCH_ID%TYPE DEFAULT NULL,
        P_COMPANY_ID    IN STORE_TRANSFER.COMPANY_ID%TYPE
    );
-- update
    PROCEDURE UPDATE_STORE_TRANSFER (
        P_TRANSFER_ID   IN STORE_TRANSFER.TRANSFER_ID%TYPE,
        P_TRANSFER_NO   IN STORE_TRANSFER.TRANSFER_NO%TYPE,
        P_TRANSFER_BY   IN STORE_TRANSFER.TRANSFER_BY%TYPE DEFAULT NULL,
        P_FROM_STORE_ID IN STORE_TRANSFER.FROM_STORE_ID%TYPE DEFAULT NULL,
        P_TO_STORE_ID   IN STORE_TRANSFER.TO_STORE_ID%TYPE DEFAULT NULL,
        P_RECEIVE_DATE  IN STORE_TRANSFER.RECEIVE_DATE%TYPE DEFAULT NULL,
        P_HAS_RECEIVED  IN STORE_TRANSFER.HAS_RECEIVED%TYPE DEFAULT NULL,
        P_TRANSFER_DATE IN STORE_TRANSFER.TRANSFER_DATE%TYPE DEFAULT NULL,
        P_RECEIVED_BY   IN STORE_TRANSFER.RECEIVED_BY%TYPE DEFAULT NULL,
        P_BRANCH_ID                   IN      STORE_TRANSFER.BRANCH_ID%TYPE DEFAULT NULL,
        P_COMPANY_ID    IN STORE_TRANSFER.COMPANY_ID%TYPE
    );
-- delete
    PROCEDURE DELETE_STORE_TRANSFER (
        P_TRANSFER_ID IN STORE_TRANSFER.TRANSFER_ID%TYPE
    );

END STORE_TRANSFER_TAPI;

/
--------------------------------------------------------
--  DDL for Package ZT_QR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ZT_QR" AUTHID DEFINER AS
/******************************************************************************
    Author:     Zoran Tica
                ZT-TECH, racunalni�ke storitve s.p.
                http://www.zt-tech.eu

    PURPOSE:    A package for QR code data and image generation 

    REVISIONS:
    Ver        Date        Author           Description
    ---------  ----------  ---------------  ------------------------------------
    1.0        18/08/2018  Zoran Tica       First version of package.
    1.1        26/05/2019  Zoran Tica       Added UTF-8 support, fixed minor BUGs for debug display
    1.2        15/12/2019  Zoran Tica       Fixed "_" and "%" BUG
    1.3        13/03/2020  Zoran Tica       Added function f_qr_as_long_raw
    1.4        07/01/2021  Zoran Tica       Terminator BUG
    1.5        05/02/2021  Zoran Tica       older databases compatibility (10g)
                                            f_integer_2_binary - LISTAGG replaced with pure PL SQL
                                            f_get_version - XMLTABLE replaced with local function f_explode
    2.0        09/02/2021  Zoran Tica       SVG files support


    ----------------------------------------------------------------------------
    Copyright (C) 2018 - Zoran Tica

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
    ----------------------------------------------------------------------------
*/


/*
Error correction modes:
L - Low       Recovers 7% of data
M - Medium    Recovers 15% of data
Q - Quartile  Recovers 25% of data
H - High      Recovers 30% of data
*/


/*
Procedure generates QR code data as varchar2 variable filled with 0 and 1
0 is white module, 1 is black
Lines are separated with chr(10)

IN parameters:
p_data - data that is going to be encoded into QR code
p_error_correction - error correction level (values L, M, Q or H)

OUT parameters:
p_qr - generated QR code data in format "row (1110100010100...) || newline (chr 10) || row || newline..."
p_matrix_size - matrix size in modules (21, 25, 29...)
*/
PROCEDURE p_generate_qr_data(
    p_data varchar2,
    p_error_correction varchar2, 
    p_qr OUT NOCOPY varchar2,
    p_matrix_size OUT pls_integer
);


/*
Procedure generates QR code data as varchar2 variable filled with 0 and 1
0 is white module, 1 is black
Lines are separated with chr(10)
Debug is printed as DBMS_OUTPUT
There are 3 levels of debug (1, 2 or 3 - low, medium, high)

IN parameters:
p_data - data that is going to be encoded into QR code
p_error_correction - error correction level (values L, M, Q or H)
p_debug - should DBMS OUTPUT be printed
p_debug_level - debug level (1, 2, 3...) - details to be printed in debug output
p_masking_out - which masking (values 0-7) should be displayed; null -> the best masking will be calculated and selected automatically 

OUT parameters:
p_qr - generated QR code data in format "row (1110100010100) || newline (chr 10) || row || newline..."
p_matrix_size - matrix size in modules (21, 25, 29...)


Testing code (enable DBMS OUTPUT for debug!):
DECLARE
    lcQR varchar2(32727);
    lnMatrixSize pls_integer;
BEGIN
    ZT_QR.p_qr_debug(
        p_data => 'http://www.zt-tech.eu',
        p_error_correction => 'Q', 
        p_debug => true,
        p_debug_level => 2,
        p_qr => lcQR,
        p_matrix_size => lnMatrixSize
    );
END;

/
