-- Generated by Oracle SQL Developer REST Data Services 20.2.0.175.1842
-- Exported REST Definitions from ORDS Schema Version 24.2.2.r1871943
-- Schema: ACCOUNTING   Date: Sun Oct 06 04:58:03 AST 2024
--
BEGIN
  ORDS.DEFINE_MODULE(
      p_module_name    => 'invoices',
      p_base_path      => '/invoices/',
      p_items_per_page =>  25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'invoices',
      p_pattern        => 'purchase_invoice',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'invoices',
      p_pattern        => 'purchase_invoice',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_INVOICE_NO                     SALES_PURCHASE_INV.INVOICE_NO%TYPE;
	V_INVOICE_ID                     SALES_PURCHASE_INV.INVOICE_ID%TYPE;
    -----------------------------------------------------------------------------
    V_DTL_ID                         SALES_PURCHASE_INV_DTL.DTL_ID%TYPE;
    V_PRODUCT_ID                     SALES_PURCHASE_INV_DTL.PRODUCT_ID%TYPE;
    -----------------------------------------------------------------------------
    L_BODY_OBJ                       JSON_OBJECT_T;
    L_ITEMS_ARR                      JSON_ARRAY_T;
    L_ITEM_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
--    INSERT INTO API_LOG (
--        API,
--        REQ_BODY
--    ) VALUES (
--        ''purchase_invoice'',
--        :body
--    );
--    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.PURCHASE_INV_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;

    BEGIN
        IF V_INVOICE_ID IS NULL THEN
            SALES_PURCHASE_INV_TAPI.INS(
                P_BANK_ACC_ID                   => L_BODY_OBJ.GET_STRING(''bank_acc_id''),
                P_PAID_AMOUNT                   => L_BODY_OBJ.GET_STRING(''paid_amount''),
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''safe_id''),
                P_POST_DISCOUNT_TOTAL_AMOUNT    => L_BODY_OBJ.GET_STRING(''post_discount_total_amount''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_TOTAL_DISCOUNT                => L_BODY_OBJ.GET_STRING(''total_discount''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''store_id''),
                P_PRE_TAX_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''pre_tax_total_amount''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_PAID_BANK_AMOUNT              => L_BODY_OBJ.GET_STRING(''paid_bank_amount''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_CLIENT_DISCOUNT               => L_BODY_OBJ.GET_STRING(''client_discount''),
                P_TOTAL_VAT                     => L_BODY_OBJ.GET_STRING(''total_vat''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_PAYMENT_TYPE                  => L_BODY_OBJ.GET_STRING(''payment_type''),
                P_DEFERRED_AMOUNT               => L_BODY_OBJ.GET_STRING(''deferred_amount''),
                P_PAID_CASH_AMOUNT              => L_BODY_OBJ.GET_STRING(''paid_cash_amount''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''store_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        ELSE
            SALES_PURCHASE_INV_TAPI.UPD(
                P_BANK_ACC_ID                   => L_BODY_OBJ.GET_STRING(''bank_acc_id''),
                P_PAID_AMOUNT                   => L_BODY_OBJ.GET_STRING(''paid_amount''),
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''safe_id''),
                P_POST_DISCOUNT_TOTAL_AMOUNT    => L_BODY_OBJ.GET_STRING(''post_discount_total_amount''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_TOTAL_DISCOUNT                => L_BODY_OBJ.GET_STRING(''total_discount''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''store_id''),
                P_PRE_TAX_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''pre_tax_total_amount''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_PAID_BANK_AMOUNT              => L_BODY_OBJ.GET_STRING(''paid_bank_amount''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_CLIENT_DISCOUNT               => L_BODY_OBJ.GET_STRING(''client_discount''),
                P_TOTAL_VAT                     => L_BODY_OBJ.GET_STRING(''total_vat''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_PAYMENT_TYPE                  => L_BODY_OBJ.GET_STRING(''payment_type''),
                P_DEFERRED_AMOUNT               => L_BODY_OBJ.GET_STRING(''deferred_amount''),
                P_PAID_CASH_AMOUNT              => L_BODY_OBJ.GET_STRING(''paid_cash_amount''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''store_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        END IF;
    END;
    L_ITEMS_ARR := L_BODY_OBJ.GET_ARRAY(''items'');
    FOR I IN 0..L_ITEMS_ARR.GET_SIZE - 1 LOOP
        L_ITEM_OBJ                := TREAT(L_ITEMS_ARR.GET(I) AS JSON_OBJECT_T);
        V_PRODUCT_ID              		:= L_ITEM_OBJ.GET_STRING(''product_id'');
        IF NVL(V_DTL_ID,0) = 0 THEN
            SALES_PURCHASE_INV_DTL_TAPI.INS(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_DISCOUNT_VALUE             => L_ITEM_OBJ.GET_STRING(''discount_value''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_PRE_DISCOUNT_VAT_VALUE     => L_ITEM_OBJ.GET_STRING(''pre_discount_vat_value''),
                P_VAT_PERCENTAGE             => L_ITEM_OBJ.GET_STRING(''vat_percentage''),
                P_TOTAL_PRICE                => L_ITEM_OBJ.GET_STRING(''total_price''),
                P_VAT_VALUE                  => L_ITEM_OBJ.GET_STRING(''vat_value''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_DISCOUNT_PERCENTAGE        => L_ITEM_OBJ.GET_STRING(''discount_percentage''),
                P_POST_DISCOUNT_TOTAL_PRICE  => L_ITEM_OBJ.GET_STRING(''post_discount_total_price''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        ELSE
            SALES_PURCHASE_INV_DTL_TAPI.UPD(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_DTL_ID                     => V_DTL_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_DISCOUNT_VALUE             => L_ITEM_OBJ.GET_STRING(''discount_value''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_PRE_DISCOUNT_VAT_VALUE     => L_ITEM_OBJ.GET_STRING(''pre_discount_vat_value''),
                P_VAT_PERCENTAGE             => L_ITEM_OBJ.GET_STRING(''vat_percentage''),
                P_TOTAL_PRICE                => L_ITEM_OBJ.GET_STRING(''total_price''),
                P_VAT_VALUE                  => L_ITEM_OBJ.GET_STRING(''vat_value''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_DISCOUNT_PERCENTAGE        => L_ITEM_OBJ.GET_STRING(''discount_percentage''),
                P_POST_DISCOUNT_TOTAL_PRICE  => L_ITEM_OBJ.GET_STRING(''post_discount_total_price''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        END IF;
    END LOOP;
    COMMIT;

    :status := ''1'';

end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'invoices',
      p_pattern            => 'purchase_invoice',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      


  COMMIT; 
END;