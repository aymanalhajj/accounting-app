-- Generated by Oracle SQL Developer REST Data Services 20.2.0.175.1842
-- Exported REST Definitions from ORDS Schema Version 24.2.2.r1871943
-- Schema: ACCOUNTING   Date: Thu Oct 24 11:03:53 AST 2024
--
BEGIN
  ORDS.DEFINE_MODULE(
      p_module_name    => 'setup',
      p_base_path      => '/setup/',
      p_items_per_page =>  25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'provider',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'provider',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_FIRST_PERIOD_STOCK(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_INVOICE_ID  => :p_invoice_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'provider',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_INVOICE_NO                     STORE_FIRST_PERIOD_STOCK.INVOICE_NO%TYPE;
	V_INVOICE_ID                     STORE_FIRST_PERIOD_STOCK.INVOICE_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    -----------------------------------------------------------------------------
    V_DTL_ID                         STORE_FIRST_PERIOD_STOCK_DTL.DTL_ID%TYPE;
    V_PRODUCT_ID                     STORE_FIRST_PERIOD_STOCK_DTL.PRODUCT_ID%TYPE;
    -----------------------------------------------------------------------------
    L_BODY_OBJ                       JSON_OBJECT_T;
    L_ITEMS_ARR                      JSON_ARRAY_T;
    L_ITEM_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''provider'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.FIRST_PERIOD_STOCK_INV_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    V_INVOICE_ID := L_BODY_OBJ.GET_STRING(''invoice_id'');
    BEGIN
        IF NVL(V_INVOICE_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_TAPI.INS(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''safe_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''store_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''store_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_TAPI.UPD(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''safe_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''store_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''store_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        END IF;
    END;
    L_ITEMS_ARR := L_BODY_OBJ.GET_ARRAY(''items'');
    STORE_FIRST_PERIOD_STOCK_DTL_TAPI.DEL_DTL(
        P_INVOICE_ID  => V_INVOICE_ID,
        P_ID_LIST     =>  L_ITEMS_ARR
    ); 
    FOR I IN 0..L_ITEMS_ARR.GET_SIZE - 1 LOOP
        L_ITEM_OBJ                := TREAT(L_ITEMS_ARR.GET(I) AS JSON_OBJECT_T);
        V_DTL_ID           		  := L_ITEM_OBJ.GET_STRING(''dtl_id'');
        IF NVL(V_DTL_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.INS(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.UPD(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_DTL_ID                     => V_DTL_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        END IF;
    END LOOP;
    COMMIT;

    :status := ''1'';

end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'provider',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'provider',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'providers',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'providers',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'select INVOICE_ID,
       to_char(INVOICE_DATE,''dd-mm-yyyy'') INVOICE_DATE,
       STORE_DATE,
       PROVIDER_INV_DATE,
       STORE_ID,
       (
        SELECT
           ITEM_NOTE_AR  INV_TYPE
        FROM
            ADMIN_LIST_ITEM
        WHERE LIST_ID = 5 AND ITEM_NO = INVOICE_TYPE) INVOICE_TYPE,
       SAFE_ID,
       COST_CTR_ID,
        C.NAME_AR PROVIDER_ID,
       INV.PROVIDER_INV_ID,
       INV.TOTAL_QUANTITY,
       INV.INVOICE_TOTAL_AMOUNT,
       INV.NOTES,
       INV.COMPANY_ID,
       INV.USER_ID,
       INV.INVOICE_NO,
       INV.BRANCH_ID
  from STORE_FIRST_PERIOD_STOCK INV JOIN SALES_PROVIDER C ON INV.PROVIDER_ID = C.PROVIDER_ID'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'role',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'role',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_FIRST_PERIOD_STOCK(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_INVOICE_ID  => :p_invoice_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'role',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_INVOICE_NO                     STORE_FIRST_PERIOD_STOCK.INVOICE_NO%TYPE;
	V_INVOICE_ID                     STORE_FIRST_PERIOD_STOCK.INVOICE_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    -----------------------------------------------------------------------------
    V_DTL_ID                         STORE_FIRST_PERIOD_STOCK_DTL.DTL_ID%TYPE;
    V_PRODUCT_ID                     STORE_FIRST_PERIOD_STOCK_DTL.PRODUCT_ID%TYPE;
    -----------------------------------------------------------------------------
    L_BODY_OBJ                       JSON_OBJECT_T;
    L_ITEMS_ARR                      JSON_ARRAY_T;
    L_ITEM_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''role'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.FIRST_PERIOD_STOCK_INV_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    V_INVOICE_ID := L_BODY_OBJ.GET_STRING(''invoice_id'');
    BEGIN
        IF NVL(V_INVOICE_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_TAPI.INS(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''role_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''role_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''role_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''role_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_TAPI.UPD(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''role_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''role_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''role_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''role_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        END IF;
    END;
    L_ITEMS_ARR := L_BODY_OBJ.GET_ARRAY(''items'');
    STORE_FIRST_PERIOD_STOCK_DTL_TAPI.DEL_DTL(
        P_INVOICE_ID  => V_INVOICE_ID,
        P_ID_LIST     =>  L_ITEMS_ARR
    ); 
    FOR I IN 0..L_ITEMS_ARR.GET_SIZE - 1 LOOP
        L_ITEM_OBJ                := TREAT(L_ITEMS_ARR.GET(I) AS JSON_OBJECT_T);
        V_DTL_ID           		  := L_ITEM_OBJ.GET_STRING(''dtl_id'');
        IF NVL(V_DTL_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.INS(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.UPD(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_DTL_ID                     => V_DTL_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        END IF;
    END LOOP;
    COMMIT;

    :status := ''1'';

end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'role',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'role',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'roles',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'roles',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'select INVOICE_ID,
       to_char(INVOICE_DATE,''dd-mm-yyyy'') INVOICE_DATE,
       STORE_DATE,
       PROVIDER_INV_DATE,
       STORE_ID,
       (
        SELECT
           ITEM_NOTE_AR  INV_TYPE
        FROM
            ADMIN_LIST_ITEM
        WHERE LIST_ID = 5 AND ITEM_NO = INVOICE_TYPE) INVOICE_TYPE,
       SAFE_ID,
       COST_CTR_ID,
        C.NAME_AR PROVIDER_ID,
       INV.PROVIDER_INV_ID,
       INV.TOTAL_QUANTITY,
       INV.INVOICE_TOTAL_AMOUNT,
       INV.NOTES,
       INV.COMPANY_ID,
       INV.USER_ID,
       INV.INVOICE_NO,
       INV.BRANCH_ID
  from STORE_FIRST_PERIOD_STOCK INV JOIN SALES_PROVIDER C ON INV.PROVIDER_ID = C.PROVIDER_ID'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'safe',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'safe',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_FIRST_PERIOD_STOCK(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_INVOICE_ID  => :p_invoice_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'safe',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_INVOICE_NO                     STORE_FIRST_PERIOD_STOCK.INVOICE_NO%TYPE;
	V_INVOICE_ID                     STORE_FIRST_PERIOD_STOCK.INVOICE_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    -----------------------------------------------------------------------------
    V_DTL_ID                         STORE_FIRST_PERIOD_STOCK_DTL.DTL_ID%TYPE;
    V_PRODUCT_ID                     STORE_FIRST_PERIOD_STOCK_DTL.PRODUCT_ID%TYPE;
    -----------------------------------------------------------------------------
    L_BODY_OBJ                       JSON_OBJECT_T;
    L_ITEMS_ARR                      JSON_ARRAY_T;
    L_ITEM_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''safe'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.FIRST_PERIOD_STOCK_INV_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    V_INVOICE_ID := L_BODY_OBJ.GET_STRING(''invoice_id'');
    BEGIN
        IF NVL(V_INVOICE_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_TAPI.INS(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''safe_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''store_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''store_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_TAPI.UPD(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''safe_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''store_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''store_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        END IF;
    END;
    L_ITEMS_ARR := L_BODY_OBJ.GET_ARRAY(''items'');
    STORE_FIRST_PERIOD_STOCK_DTL_TAPI.DEL_DTL(
        P_INVOICE_ID  => V_INVOICE_ID,
        P_ID_LIST     =>  L_ITEMS_ARR
    ); 
    FOR I IN 0..L_ITEMS_ARR.GET_SIZE - 1 LOOP
        L_ITEM_OBJ                := TREAT(L_ITEMS_ARR.GET(I) AS JSON_OBJECT_T);
        V_DTL_ID           		  := L_ITEM_OBJ.GET_STRING(''dtl_id'');
        IF NVL(V_DTL_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.INS(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.UPD(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_DTL_ID                     => V_DTL_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        END IF;
    END LOOP;
    COMMIT;

    :status := ''1'';

end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'safe',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'safe',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'safes',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'safes',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'select INVOICE_ID,
       to_char(INVOICE_DATE,''dd-mm-yyyy'') INVOICE_DATE,
       STORE_DATE,
       PROVIDER_INV_DATE,
       STORE_ID,
       (
        SELECT
           ITEM_NOTE_AR  INV_TYPE
        FROM
            ADMIN_LIST_ITEM
        WHERE LIST_ID = 5 AND ITEM_NO = INVOICE_TYPE) INVOICE_TYPE,
       SAFE_ID,
       COST_CTR_ID,
        C.NAME_AR PROVIDER_ID,
       INV.PROVIDER_INV_ID,
       INV.TOTAL_QUANTITY,
       INV.INVOICE_TOTAL_AMOUNT,
       INV.NOTES,
       INV.COMPANY_ID,
       INV.USER_ID,
       INV.INVOICE_NO,
       INV.BRANCH_ID
  from STORE_FIRST_PERIOD_STOCK INV JOIN SALES_PROVIDER C ON INV.PROVIDER_ID = C.PROVIDER_ID'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'store',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'store',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_FIRST_PERIOD_STOCK(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_INVOICE_ID  => :p_invoice_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'store',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_INVOICE_NO                     STORE_FIRST_PERIOD_STOCK.INVOICE_NO%TYPE;
	V_INVOICE_ID                     STORE_FIRST_PERIOD_STOCK.INVOICE_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    -----------------------------------------------------------------------------
    V_DTL_ID                         STORE_FIRST_PERIOD_STOCK_DTL.DTL_ID%TYPE;
    V_PRODUCT_ID                     STORE_FIRST_PERIOD_STOCK_DTL.PRODUCT_ID%TYPE;
    -----------------------------------------------------------------------------
    L_BODY_OBJ                       JSON_OBJECT_T;
    L_ITEMS_ARR                      JSON_ARRAY_T;
    L_ITEM_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''store'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.FIRST_PERIOD_STOCK_INV_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    V_INVOICE_ID := L_BODY_OBJ.GET_STRING(''invoice_id'');
    BEGIN
        IF NVL(V_INVOICE_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_TAPI.INS(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''store_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''store_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''store_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_TAPI.UPD(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''store_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''store_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''store_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        END IF;
    END;
    L_ITEMS_ARR := L_BODY_OBJ.GET_ARRAY(''items'');
    STORE_FIRST_PERIOD_STOCK_DTL_TAPI.DEL_DTL(
        P_INVOICE_ID  => V_INVOICE_ID,
        P_ID_LIST     =>  L_ITEMS_ARR
    ); 
    FOR I IN 0..L_ITEMS_ARR.GET_SIZE - 1 LOOP
        L_ITEM_OBJ                := TREAT(L_ITEMS_ARR.GET(I) AS JSON_OBJECT_T);
        V_DTL_ID           		  := L_ITEM_OBJ.GET_STRING(''dtl_id'');
        IF NVL(V_DTL_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.INS(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.UPD(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_DTL_ID                     => V_DTL_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        END IF;
    END LOOP;
    COMMIT;

    :status := ''1'';

end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'store',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'store',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'stores',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'stores',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'select INVOICE_ID,
       to_char(INVOICE_DATE,''dd-mm-yyyy'') INVOICE_DATE,
       STORE_DATE,
       PROVIDER_INV_DATE,
       STORE_ID,
       (
        SELECT
           ITEM_NOTE_AR  INV_TYPE
        FROM
            ADMIN_LIST_ITEM
        WHERE LIST_ID = 5 AND ITEM_NO = INVOICE_TYPE) INVOICE_TYPE,
       SAFE_ID,
       COST_CTR_ID,
        C.NAME_AR PROVIDER_ID,
       INV.PROVIDER_INV_ID,
       INV.TOTAL_QUANTITY,
       INV.INVOICE_TOTAL_AMOUNT,
       INV.NOTES,
       INV.COMPANY_ID,
       INV.USER_ID,
       INV.INVOICE_NO,
       INV.BRANCH_ID
  from STORE_FIRST_PERIOD_STOCK INV JOIN SALES_PROVIDER C ON INV.PROVIDER_ID = C.PROVIDER_ID'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'user',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'user',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_FIRST_PERIOD_STOCK(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_INVOICE_ID  => :p_invoice_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'user',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_INVOICE_NO                     STORE_FIRST_PERIOD_STOCK.INVOICE_NO%TYPE;
	V_INVOICE_ID                     STORE_FIRST_PERIOD_STOCK.INVOICE_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    -----------------------------------------------------------------------------
    V_DTL_ID                         STORE_FIRST_PERIOD_STOCK_DTL.DTL_ID%TYPE;
    V_PRODUCT_ID                     STORE_FIRST_PERIOD_STOCK_DTL.PRODUCT_ID%TYPE;
    -----------------------------------------------------------------------------
    L_BODY_OBJ                       JSON_OBJECT_T;
    L_ITEMS_ARR                      JSON_ARRAY_T;
    L_ITEM_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''user'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.FIRST_PERIOD_STOCK_INV_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    V_INVOICE_ID := L_BODY_OBJ.GET_STRING(''invoice_id'');
    BEGIN
        IF NVL(V_INVOICE_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_TAPI.INS(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''user_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''user_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_TAPI.UPD(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''user_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''user_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        END IF;
    END;
    L_ITEMS_ARR := L_BODY_OBJ.GET_ARRAY(''items'');
    STORE_FIRST_PERIOD_STOCK_DTL_TAPI.DEL_DTL(
        P_INVOICE_ID  => V_INVOICE_ID,
        P_ID_LIST     =>  L_ITEMS_ARR
    ); 
    FOR I IN 0..L_ITEMS_ARR.GET_SIZE - 1 LOOP
        L_ITEM_OBJ                := TREAT(L_ITEMS_ARR.GET(I) AS JSON_OBJECT_T);
        V_DTL_ID           		  := L_ITEM_OBJ.GET_STRING(''dtl_id'');
        IF NVL(V_DTL_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.INS(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.UPD(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_DTL_ID                     => V_DTL_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        END IF;
    END LOOP;
    COMMIT;

    :status := ''1'';

end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'user',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'user',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'user_priv',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'user_priv',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_FIRST_PERIOD_STOCK(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_INVOICE_ID  => :p_invoice_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'user_priv',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_INVOICE_NO                     STORE_FIRST_PERIOD_STOCK.INVOICE_NO%TYPE;
	V_INVOICE_ID                     STORE_FIRST_PERIOD_STOCK.INVOICE_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    -----------------------------------------------------------------------------
    V_DTL_ID                         STORE_FIRST_PERIOD_STOCK_DTL.DTL_ID%TYPE;
    V_PRODUCT_ID                     STORE_FIRST_PERIOD_STOCK_DTL.PRODUCT_ID%TYPE;
    -----------------------------------------------------------------------------
    L_BODY_OBJ                       JSON_OBJECT_T;
    L_ITEMS_ARR                      JSON_ARRAY_T;
    L_ITEM_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''user_priv'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.FIRST_PERIOD_STOCK_INV_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    V_INVOICE_ID := L_BODY_OBJ.GET_STRING(''invoice_id'');
    BEGIN
        IF NVL(V_INVOICE_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_TAPI.INS(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''user_priv_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_TAPI.UPD(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''user_priv_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        END IF;
    END;
    L_ITEMS_ARR := L_BODY_OBJ.GET_ARRAY(''items'');
    STORE_FIRST_PERIOD_STOCK_DTL_TAPI.DEL_DTL(
        P_INVOICE_ID  => V_INVOICE_ID,
        P_ID_LIST     =>  L_ITEMS_ARR
    ); 
    FOR I IN 0..L_ITEMS_ARR.GET_SIZE - 1 LOOP
        L_ITEM_OBJ                := TREAT(L_ITEMS_ARR.GET(I) AS JSON_OBJECT_T);
        V_DTL_ID           		  := L_ITEM_OBJ.GET_STRING(''dtl_id'');
        IF NVL(V_DTL_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.INS(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.UPD(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_DTL_ID                     => V_DTL_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        END IF;
    END LOOP;
    COMMIT;

    :status := ''1'';

end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'user_priv',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'user_priv',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'user_privs',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'user_privs',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'select INVOICE_ID,
       to_char(INVOICE_DATE,''dd-mm-yyyy'') INVOICE_DATE,
       STORE_DATE,
       PROVIDER_INV_DATE,
       STORE_ID,
       (
        SELECT
           ITEM_NOTE_AR  INV_TYPE
        FROM
            ADMIN_LIST_ITEM
        WHERE LIST_ID = 5 AND ITEM_NO = INVOICE_TYPE) INVOICE_TYPE,
       SAFE_ID,
       COST_CTR_ID,
        C.NAME_AR PROVIDER_ID,
       INV.PROVIDER_INV_ID,
       INV.TOTAL_QUANTITY,
       INV.INVOICE_TOTAL_AMOUNT,
       INV.NOTES,
       INV.COMPANY_ID,
       INV.USER_ID,
       INV.INVOICE_NO,
       INV.BRANCH_ID
  from STORE_FIRST_PERIOD_STOCK INV JOIN SALES_PROVIDER C ON INV.PROVIDER_ID = C.PROVIDER_ID'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'users',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'users',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'select INVOICE_ID,
       to_char(INVOICE_DATE,''dd-mm-yyyy'') INVOICE_DATE,
       STORE_DATE,
       PROVIDER_INV_DATE,
       STORE_ID,
       (
        SELECT
           ITEM_NOTE_AR  INV_TYPE
        FROM
            ADMIN_LIST_ITEM
        WHERE LIST_ID = 5 AND ITEM_NO = INVOICE_TYPE) INVOICE_TYPE,
       SAFE_ID,
       COST_CTR_ID,
        C.NAME_AR PROVIDER_ID,
       INV.PROVIDER_INV_ID,
       INV.TOTAL_QUANTITY,
       INV.INVOICE_TOTAL_AMOUNT,
       INV.NOTES,
       INV.COMPANY_ID,
       INV.USER_ID,
       INV.INVOICE_NO,
       INV.BRANCH_ID
  from STORE_FIRST_PERIOD_STOCK INV JOIN SALES_PROVIDER C ON INV.PROVIDER_ID = C.PROVIDER_ID'
      );


  COMMIT; 
END;