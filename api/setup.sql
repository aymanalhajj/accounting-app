-- Generated by Oracle SQL Developer REST Data Services 21.4.3.063.0100
-- Exported REST Definitions from ORDS Schema Version 24.2.3.r2011847
-- Schema: ACCOUNTING   Date: Sun Nov 17 06:09:51 AST 2024
--
BEGIN
  ORDS.ENABLE_SCHEMA(
      p_enabled             => TRUE,
      p_schema              => 'ACCOUNTING',
      p_url_mapping_type    => 'BASE_PATH',
      p_url_mapping_pattern => 'accounting',
      p_auto_rest_auth      => TRUE);    

  ORDS.DEFINE_MODULE(
      p_module_name    => 'setup',
      p_base_path      => '/setup/',
      p_items_per_page =>  25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'bank',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'bank',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_BANK(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'bank',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_RESPONSE      CLOB;
BEGIN
    SETUP_SAFE_TAPI.DELETE_SETUP_SAFE(
        P_SAFE_ID          => :p_id
    );
END;'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'banks',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'banks',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'SELECT
    BANK_ACC_ID,
    DECODE(:p_lang_id,1,NVL(ACC_NAME_EN,ACC_NAME_AR), NVL(ACC_NAME_AR,ACC_NAME_EN)) BANK_NAME,
    ACCOUNT_ID,
    TEL_NO,
    MOBILE_NO,
    COUNTRY_ID,
    CITY_ID,
    REGION_ID,
    NOTE,
    FOR_ALL_BRANCHES,
    STATUS,
    COMPANY_ID
FROM
    SETUP_BANK_EXT_ACC
WHERE
    COMPANY_ID = :p_company_id'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'branch',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'branch',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_BRANCH(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'branch',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_RESPONSE      CLOB;
BEGIN
    SETUP_SAFE_TAPI.DELETE_SETUP_SAFE(
        P_SAFE_ID          => :p_id
    );
END;'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'branchs',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'branchs',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'select
    BRANCH_ID,
    NAME_AR,
    NAME_EN,
    TEL_NO,
    MOBILE_NO,
    FAX,
    EMAIL,
    COMERCIAL_REC_NO,
    TAX_NO,
    COUNTRY_ID,
    CITY_ID,
    REGION_ID,
    BUILDING_NO,
    SREET,
    POST_CODE,
    NOTE,
    COMPANY_ID
from
    SETUP_BRANCH
WHERE
    COMPANY_ID = :p_company_id'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'client',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'client',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_CLIENT(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'client',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
	V_CLIENT_ID                    SALES_CLIENT.CLIENT_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    L_BODY_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''client'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.CUSTOMER_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
	V_CLIENT_ID := L_BODY_OBJ.GET_STRING(''client_id'');
    IF NVL(V_CLIENT_ID,0) = 0 THEN
        SALES_CLIENT_TAPI.INSERT_SALES_CLIENT(
            P_CLIENT_ID        => V_CLIENT_ID,
            P_REGION_ID        => L_BODY_OBJ.GET_STRING(''region_id''),
            P_TAX_NO           => L_BODY_OBJ.GET_STRING(''tax_no''),
            P_COUNTRY_ID       => L_BODY_OBJ.GET_STRING(''country_id''),
            P_TEL_NO           => L_BODY_OBJ.GET_STRING(''tel_no''),
            P_SREET            => L_BODY_OBJ.GET_STRING(''sreet''),
            P_ACCOUNT_ID       => L_BODY_OBJ.GET_STRING(''account_id''),
            P_NAME_AR          => L_BODY_OBJ.GET_STRING(''name_ar''),
            P_EMAIL            => L_BODY_OBJ.GET_STRING(''email''),
            P_MOBILE_NO        => L_BODY_OBJ.GET_STRING(''mobile_no''),
            P_STATUS           => L_BODY_OBJ.GET_STRING(''status''),
            P_NAME_EN          => L_BODY_OBJ.GET_STRING(''name_en''),
            P_CITY_ID          => L_BODY_OBJ.GET_STRING(''city_id''),
            P_NOTE             => L_BODY_OBJ.GET_STRING(''note''),
            P_BUILDING_NO      => L_BODY_OBJ.GET_STRING(''building_no''),
            P_POST_CODE        => L_BODY_OBJ.GET_STRING(''post_code''),
            P_FAX              => L_BODY_OBJ.GET_STRING(''fax''),
            P_COMPANY_ID       => L_BODY_OBJ.GET_STRING(''company_id'')
        );

    ELSE
        SALES_CLIENT_TAPI.UPDATE_SALES_CLIENT(
            P_CLIENT_ID        => L_BODY_OBJ.GET_STRING(''client_id''),
            P_REGION_ID        => L_BODY_OBJ.GET_STRING(''region_id''),
            P_TAX_NO           => L_BODY_OBJ.GET_STRING(''tax_no''),
            P_COUNTRY_ID       => L_BODY_OBJ.GET_STRING(''country_id''),
            P_TEL_NO           => L_BODY_OBJ.GET_STRING(''tel_no''),
            P_SREET            => L_BODY_OBJ.GET_STRING(''sreet''),
            P_ACCOUNT_ID       => L_BODY_OBJ.GET_STRING(''account_id''),
            P_NAME_AR          => L_BODY_OBJ.GET_STRING(''name_ar''),
            P_EMAIL            => L_BODY_OBJ.GET_STRING(''email''),
            P_MOBILE_NO        => L_BODY_OBJ.GET_STRING(''mobile_no''),
            P_STATUS           => L_BODY_OBJ.GET_STRING(''status''),
            P_NAME_EN          => L_BODY_OBJ.GET_STRING(''name_en''),
            P_CITY_ID          => L_BODY_OBJ.GET_STRING(''city_id''),
            P_NOTE             => L_BODY_OBJ.GET_STRING(''note''),
            P_BUILDING_NO      => L_BODY_OBJ.GET_STRING(''building_no''),
            P_POST_CODE        => L_BODY_OBJ.GET_STRING(''post_code''),
            P_FAX              => L_BODY_OBJ.GET_STRING(''fax''),
            P_COMPANY_ID       => L_BODY_OBJ.GET_STRING(''company_id'')
        );
    END IF;
    COMMIT;
    :status := ''1'';
END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'client',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'client',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'client',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_RESPONSE      CLOB;
BEGIN
    SALES_CLIENT_TAPI.DELETE_SALES_CLIENT(
        P_CLIENT_ID          => :p_id
    );
END;'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'clients',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'clients',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'SELECT
    CLIENT_ID,
    NAME_AR,
    NAME_EN,
    MOBILE_NO,
    COMPANY_ID,
    TEL_NO,
    FAX,
    EMAIL,
    TAX_NO,
    COUNTRY_ID,
    CITY_ID,
    REGION_ID,
    BUILDING_NO,
    SREET,
    POST_CODE,
    NOTE,
    STATUS,
    ACCOUNT_ID
FROM
    SALES_CLIENT
WHERE
    COMPANY_ID = :p_company_id'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'product_group',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'product_group',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_PRODUCT_GROUP(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'product_group',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
	V_GROUP_ID                    SETUP_PROD_GROUP.GROUP_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    L_BODY_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''product_group'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.SETUP_PROD_GROUP_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
	V_GROUP_ID := L_BODY_OBJ.GET_STRING(''group_id'');
    IF NVL(V_GROUP_ID,0) = 0 THEN
       SETUP_PROD_GROUP_TAPI.INSERT_SETUP_PROD_GROUP (
			  P_GROUP_ID   => V_GROUP_ID,
			  P_NAME_AR    => L_BODY_OBJ.GET_STRING(''name_ar''),
			  P_NAME_EN    => L_BODY_OBJ.GET_STRING(''name_en''),
			  P_STATUS     => L_BODY_OBJ.GET_STRING(''status''),
			  P_COMPANY_ID => L_BODY_OBJ.GET_STRING(''company_id'')
		   );
    ELSE
         SETUP_PROD_GROUP_TAPI.UPDATE_SETUP_PROD_GROUP (
			  P_GROUP_ID   => L_BODY_OBJ.GET_STRING(''group_id''),
			  P_NAME_AR    => L_BODY_OBJ.GET_STRING(''name_ar''),
			  P_NAME_EN    => L_BODY_OBJ.GET_STRING(''name_en''),
			  P_STATUS     => L_BODY_OBJ.GET_STRING(''status''),
			  P_COMPANY_ID => L_BODY_OBJ.GET_STRING(''company_id'')
		   );
    END IF;
    COMMIT;
    :status := ''1'';
END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'product_group',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'product_group',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'product_group',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_RESPONSE      CLOB;
BEGIN
    SETUP_PROD_GROUP_TAPI.DELETE_SETUP_PROD_GROUP(
        P_GROUP_ID          => :p_id
    );
END;'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'product_groups',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'product_groups',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'SELECT
    GROUP_ID,
    NAME_AR,
    NAME_EN,
    STATUS,
    COMPANY_ID
FROM
    SETUP_PROD_GROUP
WHERE
    COMPANY_ID = :p_company_id'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'provider',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'provider',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_PROVIDER(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'provider',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
	V_PROVIDER_ID                    SALES_PROVIDER.PROVIDER_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    L_BODY_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''provider'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.PROVIDER_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    IF NVL(V_PROVIDER_ID,0) = 0 THEN
        SALES_PROVIDER_TAPI.INSERT_SALES_PROVIDER(
            P_PROVIDER_ID      => V_PROVIDER_ID,
            P_REGION_ID        => L_BODY_OBJ.GET_STRING(''region_id''),
            P_TAX_NO           => L_BODY_OBJ.GET_STRING(''tax_no''),
            P_COUNTRY_ID       => L_BODY_OBJ.GET_STRING(''country_id''),
            P_TEL_NO           => L_BODY_OBJ.GET_STRING(''tel_no''),
            P_SREET            => L_BODY_OBJ.GET_STRING(''sreet''),
            P_ACCOUNT_ID       => L_BODY_OBJ.GET_STRING(''account_id''),
            P_NAME_AR          => L_BODY_OBJ.GET_STRING(''name_ar''),
            P_EMAIL            => L_BODY_OBJ.GET_STRING(''email''),
            P_MOBILE_NO        => L_BODY_OBJ.GET_STRING(''mobile_no''),
            P_STATUS           => L_BODY_OBJ.GET_STRING(''status''),
            P_NAME_EN          => L_BODY_OBJ.GET_STRING(''name_en''),
            P_CITY_ID          => L_BODY_OBJ.GET_STRING(''city_id''),
            P_NOTE             => L_BODY_OBJ.GET_STRING(''note''),
            P_BUILDING_NO      => L_BODY_OBJ.GET_STRING(''building_no''),
            P_POST_CODE        => L_BODY_OBJ.GET_STRING(''post_code''),
            P_FAX              => L_BODY_OBJ.GET_STRING(''fax''),
            P_COMPANY_ID       => L_BODY_OBJ.GET_STRING(''company_id'')
        );
    ELSE
        SALES_PROVIDER_TAPI.UPDATE_SALES_PROVIDER(
            P_PROVIDER_ID      => L_BODY_OBJ.GET_STRING(''provider_id''),
            P_REGION_ID        => L_BODY_OBJ.GET_STRING(''region_id''),
            P_TAX_NO           => L_BODY_OBJ.GET_STRING(''tax_no''),
            P_COUNTRY_ID       => L_BODY_OBJ.GET_STRING(''country_id''),
            P_TEL_NO           => L_BODY_OBJ.GET_STRING(''tel_no''),
            P_SREET            => L_BODY_OBJ.GET_STRING(''sreet''),
            P_ACCOUNT_ID       => L_BODY_OBJ.GET_STRING(''account_id''),
            P_NAME_AR          => L_BODY_OBJ.GET_STRING(''name_ar''),
            P_EMAIL            => L_BODY_OBJ.GET_STRING(''email''),
            P_MOBILE_NO        => L_BODY_OBJ.GET_STRING(''mobile_no''),
            P_STATUS           => L_BODY_OBJ.GET_STRING(''status''),
            P_NAME_EN          => L_BODY_OBJ.GET_STRING(''name_en''),
            P_CITY_ID          => L_BODY_OBJ.GET_STRING(''city_id''),
            P_NOTE             => L_BODY_OBJ.GET_STRING(''note''),
            P_BUILDING_NO      => L_BODY_OBJ.GET_STRING(''building_no''),
            P_POST_CODE        => L_BODY_OBJ.GET_STRING(''post_code''),
            P_FAX              => L_BODY_OBJ.GET_STRING(''fax''),
            P_COMPANY_ID       => L_BODY_OBJ.GET_STRING(''company_id'')
        );
    END IF;
    COMMIT;
    :status := ''1'';
END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'provider',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'provider',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'provider',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_RESPONSE      CLOB;
BEGIN
    SALES_PROVIDER_TAPI.DEL_SALES_PROVIDER(
        P_PROVIDER_ID          => :p_id
    );
END;'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'providers',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'providers',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'select PROVIDER_ID,
       NAME_AR,
       NAME_EN,
       MOBILE_NO,
       TEL_NO,
       FAX,
       EMAIL,
       TAX_NO,
       NOTE
  from SALES_PROVIDER
 where company_id=:p_company_id'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'role',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'role',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_ROLE(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'role',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_ID                             SETUP_APP_ROLE.ROLE_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    L_BODY_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''store'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.ROLE_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    V_ID := L_BODY_OBJ.GET_STRING(''role_id'');
    BEGIN
        IF NVL(V_ID,0) = 0 THEN
            SETUP_APP_ROLE_TAPI.INSERT_SETUP_APP_ROLE(
                P_ROLE_ID       => V_ID,
                P_ROLE_NAME     => L_BODY_OBJ.GET_STRING(''role_name''),
                P_CREATED_BY    => L_BODY_OBJ.GET_STRING(''created_by''),
                P_CREATED_AT    => L_BODY_OBJ.GET_STRING(''created_at''),
                P_COMPANY_ID    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_ROLE_NAME_EN  => L_BODY_OBJ.GET_STRING(''role_name_en'')
            );
        ELSE
            SETUP_APP_ROLE_TAPI.UPDATE_SETUP_APP_ROLE(
                P_ROLE_ID       => V_ID,
                P_ROLE_NAME     => L_BODY_OBJ.GET_STRING(''role_name''),
                P_MODIFIED_BY   => L_BODY_OBJ.GET_STRING(''modified_by''),
                P_MODIFIED_AT   => L_BODY_OBJ.GET_STRING(''modified_at''),
                P_COMPANY_ID    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_ROLE_NAME_EN  => L_BODY_OBJ.GET_STRING(''role_name_en'')
            );
        END IF;
    END;
    COMMIT;
    :status := ''1'';
end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'role',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'role',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'role',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_RESPONSE      CLOB;
BEGIN
    SETUP_APP_ROLE_TAPI.DELETE_SETUP_APP_ROLE(
        P_ROLE_ID          => :p_id
    );
END;'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'roles',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'roles',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'SELECT
    ROLE_ID,
    ROLE_NAME,
    ROLE_NAME_EN,
    CREATED_BY,
    CREATED_AT,
    MODIFIED_BY,
    MODIFIED_AT
FROM
    SETUP_APP_ROLE
WHERE
    COMPANY_ID = :p_company_id'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'safe',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'safe',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_SAFE(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'safe',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_ID                             SETUP_SAFE.SAFE_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    L_BODY_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''store'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.SETUP_SAFE_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    V_ID := L_BODY_OBJ.GET_STRING(''safe_id'');
    BEGIN
        IF NVL(V_ID,0) = 0 THEN
            SETUP_SAFE_TAPI.INSERT_SETUP_SAFE(
                P_SAFE_ID           => V_ID,
                P_SAFE_NAME_AR      => L_BODY_OBJ.GET_STRING(''safe_name_ar''),
                P_SAFE_NAME_EN      => L_BODY_OBJ.GET_STRING(''safe_name_en''),
                P_BRANCH_ID         => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_ACCOUNT_ID        => L_BODY_OBJ.GET_STRING(''account_id''),
                P_NOTE              => L_BODY_OBJ.GET_STRING(''note''),
                P_IS_DEFAULT        => L_BODY_OBJ.GET_STRING(''is_default''),
                P_FOR_ALL_BRANCHES  => L_BODY_OBJ.GET_STRING(''for_all_branches''),
                P_STATUS            => L_BODY_OBJ.GET_STRING(''status''),
                P_COMPANY_ID        => L_BODY_OBJ.GET_STRING(''company_id'')
            );
        ELSE
            SETUP_SAFE_TAPI.UPDATE_SETUP_SAFE(
                P_SAFE_ID           => V_ID,
                P_SAFE_NAME_AR      => L_BODY_OBJ.GET_STRING(''safe_name_ar''),
                P_SAFE_NAME_EN      => L_BODY_OBJ.GET_STRING(''safe_name_en''),
                P_BRANCH_ID         => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_ACCOUNT_ID        => L_BODY_OBJ.GET_STRING(''account_id''),
                P_NOTE              => L_BODY_OBJ.GET_STRING(''note''),
                P_IS_DEFAULT        => L_BODY_OBJ.GET_STRING(''is_default''),
                P_FOR_ALL_BRANCHES  => L_BODY_OBJ.GET_STRING(''for_all_branches''),
                P_STATUS            => L_BODY_OBJ.GET_STRING(''status''),
                P_COMPANY_ID        => L_BODY_OBJ.GET_STRING(''company_id'')
            );
        END IF;
    END;
    COMMIT;
    :status := ''1'';
end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'safe',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'safe',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'safe',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_RESPONSE      CLOB;
BEGIN
    SETUP_SAFE_TAPI.DELETE_SETUP_SAFE(
        P_SAFE_ID          => :p_id
    );
END;'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'safes',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'safes',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'SELECT
    SAFE_ID,
    SAFE_NAME_AR,
    SAFE_NAME_EN,
    BRANCH_ID,
    ACCOUNT_ID,
    NOTE,
    IS_DEFAULT,
    FOR_ALL_BRANCHES,
    STATUS
FROM
    SETUP_SAFE
WHERE
    COMPANY_ID = :p_company_id'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'store',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'store',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_STORE(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'store',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_ID                             SETUP_STORE.STORE_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    L_BODY_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''store'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.SETUP_STORE_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    V_ID := L_BODY_OBJ.GET_STRING(''store_id'');
    BEGIN
        IF NVL(V_ID,0) = 0 THEN
            SETUP_STORE_TAPI.INSERT_SETUP_STORE(
                P_STORE_ID      => V_ID,
                P_STORE_NAME    => L_BODY_OBJ.GET_STRING(''store_name''),
                P_BRANCH_ID     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_NOTE          => L_BODY_OBJ.GET_STRING(''note''),
                P_STATUS        => L_BODY_OBJ.GET_STRING(''status''),
                P_COMPANY_ID    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_STORE_NAME_EN => L_BODY_OBJ.GET_STRING(''store_name_en'')
            );
        ELSE
            SETUP_STORE_TAPI.UPDATE_SETUP_STORE(
                P_STORE_ID      => V_ID,
                P_STORE_NAME    => L_BODY_OBJ.GET_STRING(''store_name''),
                P_BRANCH_ID     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_NOTE          => L_BODY_OBJ.GET_STRING(''note''),
                P_STATUS        => L_BODY_OBJ.GET_STRING(''status''),
                P_COMPANY_ID    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_STORE_NAME_EN => L_BODY_OBJ.GET_STRING(''store_name_en'')
            );
        END IF;
    END;
    COMMIT;
    :status := ''1'';
end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'store',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'store',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'store',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_RESPONSE      CLOB;
BEGIN
    SETUP_STORE_TAPI.DELETE_SETUP_STORE(
        P_STORE_ID          => :p_id
    );
END;'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'stores',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'stores',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'SELECT
    STORE_ID,
    DECODE(:G_LANG_ID,2,NVL(STORE_NAME_AR,STORE_NAME_EN),NVL(STORE_NAME_EN,STORE_NAME_AR)) STORE_NAME,
    NOTE,
    BRANCH_ID,
    STATUS
FROM
    SETUP_STORE
WHERE
    COMPANY_ID = :p_company_id'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'tax_group',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'tax_group',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_TAX_GROUP(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'tax_group',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
	V_GROUP_ID                    SETUP_TAX_GROUP.GROUP_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    L_BODY_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''client'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.SETUP_TAX_GROUP_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
	V_GROUP_ID := L_BODY_OBJ.GET_STRING(''group_id'');
    IF NVL(V_GROUP_ID,0) = 0 THEN
       SETUP_TAX_GROUP_TAPI.INSERT_SETUP_TAX_GROUP (
			  P_GROUP_ID       => V_GROUP_ID,
			  P_NAME_AR        => L_BODY_OBJ.GET_STRING(''name_ar''),
			  P_NAME_EN        => L_BODY_OBJ.GET_STRING(''name_en''),
			  P_GROUP_VALUE    => L_BODY_OBJ.GET_STRING(''group_value''),
			  P_STATUS         => L_BODY_OBJ.GET_STRING(''status''),
			  P_COMPANY_ID     => L_BODY_OBJ.GET_STRING(''company_id'')
		   );
    ELSE
         SETUP_TAX_GROUP_TAPI.UPDATE_SETUP_TAX_GROUP (
			  P_GROUP_ID       => L_BODY_OBJ.GET_STRING(''group_id''),
			  P_NAME_AR        => L_BODY_OBJ.GET_STRING(''name_ar''),
			  P_NAME_EN        => L_BODY_OBJ.GET_STRING(''name_en''),
			  P_GROUP_VALUE    => L_BODY_OBJ.GET_STRING(''group_value''),
			  P_STATUS         => L_BODY_OBJ.GET_STRING(''status''),
			  P_COMPANY_ID     => L_BODY_OBJ.GET_STRING(''company_id'')
		   );
    END IF;
    COMMIT;
    :status := ''1'';
END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'tax_group',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'tax_group',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'tax_group',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_RESPONSE      CLOB;
BEGIN
    SETUP_TAX_GROUP_TAPI.DELETE_SETUP_TAX_GROUP(
        P_GROUP_ID          => :p_id
    );
END;'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'tax_groups',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'tax_groups',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'SELECT
    GROUP_ID,
    NAME_AR,
    NAME_EN,
    GROUP_VALUE,
    STATUS,
    COMPANY_ID
FROM
    SETUP_TAX_GROUP
WHERE
    COMPANY_ID = :p_company_id'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'user',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'user',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_USER(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'user',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_ID                             SETUP_APP_USER.USER_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    L_BODY_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''store'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.USER_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    V_ID := L_BODY_OBJ.GET_STRING(''user_id'');
    BEGIN
        IF NVL(V_ID,0) = 0 THEN
            SETUP_APP_USER_TAPI.INSERT_SETUP_APP_USER(
                P_USER_ID       => V_ID,
                P_USER_NAME     => L_BODY_OBJ.GET_STRING(''user_name''),
                P_PASS          => L_BODY_OBJ.GET_STRING(''pass''),
                P_CREATED_BY    => L_BODY_OBJ.GET_STRING(''created_by''),
                P_CREATED_AT    => L_BODY_OBJ.GET_STRING(''created_at''),
                P_STATUS        => L_BODY_OBJ.GET_STRING(''status''),
                P_USER_TYPE     => L_BODY_OBJ.GET_STRING(''user_type''),
                P_COMPANY_ID    => L_BODY_OBJ.GET_STRING(''company_id'')
            );
        ELSE
            SETUP_APP_USER_TAPI.UPDATE_SETUP_APP_USER(
                P_USER_ID       => V_ID,
                P_USER_NAME     => L_BODY_OBJ.GET_STRING(''user_name''),
                P_PASS          => L_BODY_OBJ.GET_STRING(''pass''),
                P_MODIFIED_BY   => L_BODY_OBJ.GET_STRING(''modified_by''),
                P_MODIFIED_AT   => L_BODY_OBJ.GET_STRING(''modified_at''),
                P_STATUS        => L_BODY_OBJ.GET_STRING(''status''),
                P_USER_TYPE     => L_BODY_OBJ.GET_STRING(''user_type''),
                P_COMPANY_ID    => L_BODY_OBJ.GET_STRING(''company_id'')
            );
        END IF;
    END;
    COMMIT;
    :status := ''1'';
end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'user',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'user',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'user',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_RESPONSE      CLOB;
BEGIN
    SETUP_APP_USER_TAPI.DELETE_SETUP_APP_USER(
        P_USER_ID          => :p_id
    );
END;'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'user_priv',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'user_priv',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_FIRST_PERIOD_STOCK(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_INVOICE_ID  => :p_invoice_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'user_priv',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_INVOICE_NO                     STORE_FIRST_PERIOD_STOCK.INVOICE_NO%TYPE;
	V_INVOICE_ID                     STORE_FIRST_PERIOD_STOCK.INVOICE_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    -----------------------------------------------------------------------------
    V_DTL_ID                         STORE_FIRST_PERIOD_STOCK_DTL.DTL_ID%TYPE;
    V_PRODUCT_ID                     STORE_FIRST_PERIOD_STOCK_DTL.PRODUCT_ID%TYPE;
    -----------------------------------------------------------------------------
    L_BODY_OBJ                       JSON_OBJECT_T;
    L_ITEMS_ARR                      JSON_ARRAY_T;
    L_ITEM_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''user_priv'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);
    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.FIRST_PERIOD_STOCK_INV_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_VALID_RESULT
    );
    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_VALID_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_VALID_RESULT.stringify);
        return;
    END IF;
    V_INVOICE_ID := L_BODY_OBJ.GET_STRING(''invoice_id'');
    BEGIN
        IF NVL(V_INVOICE_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_TAPI.INS(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''user_priv_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_TAPI.UPD(
                P_SAFE_ID                       => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_USER_ID                       => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_PROVIDER_ID                   => L_BODY_OBJ.GET_STRING(''provider_id''),
                P_PROVIDER_INV_ID               => L_BODY_OBJ.GET_STRING(''provider_inv_id''),
                P_NOTES                         => L_BODY_OBJ.GET_STRING(''notes''),
                P_INVOICE_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''invoice_total_amount''),
                P_INVOICE_TYPE                  => L_BODY_OBJ.GET_STRING(''invoice_type''),
                P_TOTAL_QUANTITY                => L_BODY_OBJ.GET_STRING(''total_quantity''),
                P_STORE_ID                      => L_BODY_OBJ.GET_STRING(''user_priv_id''),
                P_COMPANY_ID                    => L_BODY_OBJ.GET_STRING(''company_id''),
                P_COST_CTR_ID                   => L_BODY_OBJ.GET_STRING(''cost_ctr_id''),
                P_INVOICE_DATE                  => TO_DATE(L_BODY_OBJ.GET_STRING(''invoice_date''),''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(L_BODY_OBJ.GET_STRING(''user_priv_date''),''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(L_BODY_OBJ.GET_STRING(''provider_inv_date''),''DD-MM-YYYY''),
                P_BRANCH_ID                     => L_BODY_OBJ.GET_STRING(''branch_id''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID
            );
        END IF;
    END;
    L_ITEMS_ARR := L_BODY_OBJ.GET_ARRAY(''items'');
    STORE_FIRST_PERIOD_STOCK_DTL_TAPI.DEL_DTL(
        P_INVOICE_ID  => V_INVOICE_ID,
        P_ID_LIST     =>  L_ITEMS_ARR
    ); 
    FOR I IN 0..L_ITEMS_ARR.GET_SIZE - 1 LOOP
        L_ITEM_OBJ                := TREAT(L_ITEMS_ARR.GET(I) AS JSON_OBJECT_T);
        V_DTL_ID           		  := L_ITEM_OBJ.GET_STRING(''dtl_id'');
        IF NVL(V_DTL_ID,0) = 0 THEN
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.INS(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        ELSE
            STORE_FIRST_PERIOD_STOCK_DTL_TAPI.UPD(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_DTL_ID                     => V_DTL_ID,
                P_PRICE                      => L_ITEM_OBJ.GET_STRING(''base_price''),
                P_QUANTITY                   => L_ITEM_OBJ.GET_STRING(''quantity''),
                P_PRODUCT_UNIT_ID            => L_ITEM_OBJ.GET_STRING(''unit_id''),
                P_PRODUCT_ID                 => L_ITEM_OBJ.GET_STRING(''product_id''),
                P_TOTAL_AMOUNT               => L_ITEM_OBJ.GET_STRING(''total_amount'')
            );
        END IF;
    END LOOP;
    COMMIT;

    :status := ''1'';

end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'user_priv',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'setup',
      p_pattern            => 'user_priv',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'user_privs',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'user_privs',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'select INVOICE_ID,
       to_char(INVOICE_DATE,''dd-mm-yyyy'') INVOICE_DATE,
       STORE_DATE,
       PROVIDER_INV_DATE,
       STORE_ID,
       (
        SELECT
           ITEM_NOTE_AR  INV_TYPE
        FROM
            ADMIN_LIST_ITEM
        WHERE LIST_ID = 5 AND ITEM_NO = INVOICE_TYPE) INVOICE_TYPE,
       SAFE_ID,
       COST_CTR_ID,
        C.NAME_AR PROVIDER_ID,
       INV.PROVIDER_INV_ID,
       INV.TOTAL_QUANTITY,
       INV.INVOICE_TOTAL_AMOUNT,
       INV.NOTES,
       INV.COMPANY_ID,
       INV.USER_ID,
       INV.INVOICE_NO,
       INV.BRANCH_ID
  from STORE_FIRST_PERIOD_STOCK INV JOIN SALES_PROVIDER C ON INV.PROVIDER_ID = C.PROVIDER_ID'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'setup',
      p_pattern        => 'users',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'setup',
      p_pattern        => 'users',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'SELECT
    USER_ID,
    USER_NAME,
    USER_TYPE,
    PREFERED_LANG_ID,
    STATUS,
    CREATED_BY,
    CREATED_AT,
    MODIFIED_BY,
    MODIFIED_AT
FROM
    SETUP_APP_USER
WHERE
    COMPANY_ID = :p_company_id'
      );


  COMMIT; 
END;