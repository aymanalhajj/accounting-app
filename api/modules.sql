-- Generated by Oracle SQL Developer REST Data Services 20.2.0.175.1842
-- Exported REST Definitions from ORDS Schema Version 24.2.2.r1871943
-- Schema: ACCOUNTING   Date: Fri Oct 04 19:42:50 AST 2024
--
BEGIN
  ORDS.ENABLE_SCHEMA(
      p_enabled             => TRUE,
      p_schema              => 'ACCOUNTING',
      p_url_mapping_type    => 'BASE_PATH',
      p_url_mapping_pattern => 'accounting',
      p_auto_rest_auth      => FALSE);    

  ORDS.DEFINE_MODULE(
      p_module_name    => 'invoices',
      p_base_path      => '/invoices/',
      p_items_per_page =>  25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'invoices',
      p_pattern        => 'purchase_invoice',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'invoices',
      p_pattern        => 'purchase_invoice',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_INVOICE_DATE                   VARCHAR2(100);
	V_PROVIDER_INV_DATE              VARCHAR2(100);
	V_STORE_DATE                     VARCHAR2(100);
    V_BANK_ACC_ID                    SALES_PURCHASE_INV.BANK_ACC_ID%TYPE;
	V_ACC_JOURNAL_ID                 SALES_PURCHASE_INV.ACC_JOURNAL_ID%TYPE;
	V_PAID_AMOUNT                    SALES_PURCHASE_INV.PAID_AMOUNT%TYPE;
	V_SAFE_ID                        SALES_PURCHASE_INV.SAFE_ID%TYPE;
	V_POST_DISCOUNT_TOTAL_AMOUNT     SALES_PURCHASE_INV.POST_DISCOUNT_TOTAL_AMOUNT%TYPE;
	V_USER_ID                        SALES_PURCHASE_INV.USER_ID%TYPE;
	V_PROVIDER_ID                    SALES_PURCHASE_INV.PROVIDER_ID%TYPE;
	V_TOTAL_DISCOUNT                 SALES_PURCHASE_INV.TOTAL_DISCOUNT%TYPE;
	V_NOTES                          SALES_PURCHASE_INV.NOTES%TYPE;
	V_INVOICE_TOTAL_AMOUNT           SALES_PURCHASE_INV.INVOICE_TOTAL_AMOUNT%TYPE;
	V_INVOICE_TYPE                   SALES_PURCHASE_INV.INVOICE_TYPE%TYPE;
	V_TOTAL_QUANTITY                 SALES_PURCHASE_INV.TOTAL_QUANTITY%TYPE;
	V_STORE_ID                       SALES_PURCHASE_INV.STORE_ID%TYPE;
	V_PRE_TAX_TOTAL_AMOUNT           SALES_PURCHASE_INV.PRE_TAX_TOTAL_AMOUNT%TYPE;
	V_COMPANY_ID                     SALES_PURCHASE_INV.COMPANY_ID%TYPE;
	V_PAID_BANK_AMOUNT               SALES_PURCHASE_INV.PAID_BANK_AMOUNT%TYPE;
	V_COST_CTR_ID                    SALES_PURCHASE_INV.COST_CTR_ID%TYPE;
	V_CLIENT_DISCOUNT                SALES_PURCHASE_INV.CLIENT_DISCOUNT%TYPE;
	V_TOTAL_VAT                      SALES_PURCHASE_INV.TOTAL_VAT%TYPE;
	V_PROVIDER_INV_ID                SALES_PURCHASE_INV.PROVIDER_INV_ID%TYPE;
	V_PAYMENT_TYPE                   SALES_PURCHASE_INV.PAYMENT_TYPE%TYPE;
	V_DEFERRED_AMOUNT                SALES_PURCHASE_INV.DEFERRED_AMOUNT%TYPE;
	V_PAID_CASH_AMOUNT               SALES_PURCHASE_INV.PAID_CASH_AMOUNT%TYPE;
	V_BRANCH_ID                      SALES_PURCHASE_INV.BRANCH_ID%TYPE;
	V_INVOICE_NO                     SALES_PURCHASE_INV.INVOICE_NO%TYPE;
	V_INVOICE_ID                     SALES_PURCHASE_INV.INVOICE_ID%TYPE;
    -----------------------------------------------------------------------------
    V_DTL_ID                         SALES_PURCHASE_INV_DTL.DTL_ID%TYPE;
    V_PRODUCT_ID                     SALES_PURCHASE_INV_DTL.PRODUCT_ID%TYPE;
    V_PRICE                          SALES_PURCHASE_INV_DTL.PRICE%TYPE;
    V_QUANTITY                       SALES_PURCHASE_INV_DTL.QUANTITY%TYPE;
    V_DISCOUNT_VALUE                 SALES_PURCHASE_INV_DTL.DISCOUNT_VALUE%TYPE;
    V_PRE_DISCOUNT_VAT_VALUE         SALES_PURCHASE_INV_DTL.PRE_DISCOUNT_VAT_VALUE%TYPE;
    V_VAT_PERCENTAGE                 SALES_PURCHASE_INV_DTL.VAT_PERCENTAGE%TYPE;
    V_TOTAL_PRICE                    SALES_PURCHASE_INV_DTL.TOTAL_PRICE%TYPE;
    V_VAT_VALUE                      SALES_PURCHASE_INV_DTL.VAT_VALUE%TYPE;
    V_PRODUCT_UNIT_ID                SALES_PURCHASE_INV_DTL.PRODUCT_UNIT_ID%TYPE;
    V_DISCOUNT_PERCENTAGE            SALES_PURCHASE_INV_DTL.DISCOUNT_PERCENTAGE%TYPE;
    V_POST_DISCOUNT_TOTAL_PRICE      SALES_PURCHASE_INV_DTL.POST_DISCOUNT_TOTAL_PRICE%TYPE;
    V_TOTAL_AMOUNT                   SALES_PURCHASE_INV_DTL.TOTAL_AMOUNT%TYPE;
    -----------------------------------------------------------------------------
    L_BODY_OBJ                       JSON_OBJECT_T;
    L_ITEMS_ARR                      JSON_ARRAY_T;
    L_ITEM_OBJ                       JSON_OBJECT_T;
    -----------------------------------------------------------------------------
    P_RESULT  JSON_OBJECT_T;
    v_result_clob  clob;
BEGIN
--    INSERT INTO API_LOG (
--        API,
--        REQ_BODY
--    ) VALUES (
--        ''purchase_invoice'',
--        :body
--    );
--    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:body);

    V_BANK_ACC_ID                 := L_BODY_OBJ.GET_STRING(''bank_acc_id'');
	V_PAID_AMOUNT                 := L_BODY_OBJ.GET_STRING(''paid_amount'');
	V_SAFE_ID                     := L_BODY_OBJ.GET_STRING(''safe_id'');
	V_POST_DISCOUNT_TOTAL_AMOUNT  := L_BODY_OBJ.GET_STRING(''post_discount_total_amount'');
	V_USER_ID                     := L_BODY_OBJ.GET_STRING(''user_id'');
	V_PROVIDER_ID                 := L_BODY_OBJ.GET_STRING(''provider_id'');
	V_TOTAL_DISCOUNT              := L_BODY_OBJ.GET_STRING(''total_discount'');
	V_NOTES                       := L_BODY_OBJ.GET_STRING(''notes'');
	V_INVOICE_TOTAL_AMOUNT        := L_BODY_OBJ.GET_STRING(''invoice_total_amount'');
	V_INVOICE_TYPE                := L_BODY_OBJ.GET_STRING(''invoice_type'');
	V_TOTAL_QUANTITY              := L_BODY_OBJ.GET_STRING(''total_quantity'');
	V_STORE_ID                    := L_BODY_OBJ.GET_STRING(''store_id'');
	V_PRE_TAX_TOTAL_AMOUNT        := L_BODY_OBJ.GET_STRING(''pre_tax_total_amount'');
	V_COMPANY_ID                  := L_BODY_OBJ.GET_STRING(''company_id'');
	V_PAID_BANK_AMOUNT            := L_BODY_OBJ.GET_STRING(''paid_bank_amount'');
	V_COST_CTR_ID                 := L_BODY_OBJ.GET_STRING(''cost_ctr_id'');
	V_CLIENT_DISCOUNT             := L_BODY_OBJ.GET_STRING(''client_discount'');
	V_TOTAL_VAT                   := L_BODY_OBJ.GET_STRING(''total_vat'');
	V_PROVIDER_INV_ID             := L_BODY_OBJ.GET_STRING(''provider_inv_id'');
	V_PAYMENT_TYPE                := L_BODY_OBJ.GET_STRING(''payment_type'');
	V_DEFERRED_AMOUNT             := L_BODY_OBJ.GET_STRING(''deferred_amount'');
	V_PROVIDER_INV_DATE           := L_BODY_OBJ.GET_STRING(''provider_inv_date'');
	V_INVOICE_DATE                := L_BODY_OBJ.GET_STRING(''invoice_date'');
	V_STORE_DATE                  := L_BODY_OBJ.GET_STRING(''store_date'');
	V_PAID_CASH_AMOUNT            := L_BODY_OBJ.GET_STRING(''paid_cash_amount'');
	V_BRANCH_ID                   := L_BODY_OBJ.GET_STRING(''branch_id'');
	--V_INVOICE_NO                  := L_BODY_OBJ.GET_STRING(''invoice_no'');
	--V_INVOICE_ID                  := L_BODY_OBJ.GET_STRING(''invoice_id'');

    -- step 2: call the procedure to validate inputs
    DATA_VALIDATION.PURCHASE_INV_VALIDATE(
        P_DATA => L_BODY_OBJ,
        P_LANG => 2,
        P_RESULT => P_RESULT
    );
    IF P_RESULT.GET_STRING(''status'') = ''failed'' THEN
        owa_util.mime_header (''application/json'', true); 
        P_RESULT.put(''data-not-valid'',''true'');
        htp.p(P_RESULT.stringify);
        return;
    END IF;

    BEGIN
        IF V_INVOICE_ID IS NULL THEN
            SALES_PURCHASE_INV_TAPI.INS(
                P_BANK_ACC_ID                   => V_BANK_ACC_ID,
                P_PAID_AMOUNT                   => V_PAID_AMOUNT,
                P_SAFE_ID                       => V_SAFE_ID,
                P_POST_DISCOUNT_TOTAL_AMOUNT    => V_POST_DISCOUNT_TOTAL_AMOUNT,
                P_USER_ID                       => V_USER_ID,
                P_PROVIDER_ID                   => V_PROVIDER_ID,
                P_TOTAL_DISCOUNT                => V_TOTAL_DISCOUNT,
                P_NOTES                         => V_NOTES,
                P_INVOICE_TOTAL_AMOUNT          => V_INVOICE_TOTAL_AMOUNT,
                P_INVOICE_TYPE                  => V_INVOICE_TYPE,
                P_TOTAL_QUANTITY                => V_TOTAL_QUANTITY,
                P_STORE_ID                      => V_STORE_ID,
                P_PRE_TAX_TOTAL_AMOUNT          => V_PRE_TAX_TOTAL_AMOUNT,
                P_COMPANY_ID                    => V_COMPANY_ID,
                P_PAID_BANK_AMOUNT              => V_PAID_BANK_AMOUNT,
                P_COST_CTR_ID                   => V_COST_CTR_ID,
                P_CLIENT_DISCOUNT               => V_CLIENT_DISCOUNT,
                P_TOTAL_VAT                     => V_TOTAL_VAT,
                P_PROVIDER_INV_ID               => V_PROVIDER_INV_ID,
                P_PAYMENT_TYPE                  => V_PAYMENT_TYPE,
                P_DEFERRED_AMOUNT               => V_DEFERRED_AMOUNT,
                P_PAID_CASH_AMOUNT              => V_PAID_CASH_AMOUNT,
                P_INVOICE_DATE                  => TO_DATE(V_INVOICE_DATE,''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(V_PROVIDER_INV_DATE,''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(V_STORE_DATE,''DD-MM-YYYY''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID,
                P_BRANCH_ID                     => V_BRANCH_ID
            );
        ELSE
            SALES_PURCHASE_INV_TAPI.UPD(
                P_BANK_ACC_ID                   => V_BANK_ACC_ID,
                P_PAID_AMOUNT                   => V_PAID_AMOUNT,
                P_SAFE_ID                       => V_SAFE_ID,
                P_POST_DISCOUNT_TOTAL_AMOUNT    => V_POST_DISCOUNT_TOTAL_AMOUNT,
                P_USER_ID                       => V_USER_ID,
                P_PROVIDER_ID                   => V_PROVIDER_ID,
                P_TOTAL_DISCOUNT                => V_TOTAL_DISCOUNT,
                P_NOTES                         => V_NOTES,
                P_INVOICE_TOTAL_AMOUNT          => V_INVOICE_TOTAL_AMOUNT,
                P_INVOICE_TYPE                  => V_INVOICE_TYPE,
                P_TOTAL_QUANTITY                => V_TOTAL_QUANTITY,
                P_STORE_ID                      => V_STORE_ID,
                P_PRE_TAX_TOTAL_AMOUNT          => V_PRE_TAX_TOTAL_AMOUNT,
                P_COMPANY_ID                    => V_COMPANY_ID,
                P_PAID_BANK_AMOUNT              => V_PAID_BANK_AMOUNT,
                P_COST_CTR_ID                   => V_COST_CTR_ID,
                P_CLIENT_DISCOUNT               => V_CLIENT_DISCOUNT,
                P_TOTAL_VAT                     => V_TOTAL_VAT,
                P_PROVIDER_INV_ID               => V_PROVIDER_INV_ID,
                P_PAYMENT_TYPE                  => V_PAYMENT_TYPE,
                P_DEFERRED_AMOUNT               => V_DEFERRED_AMOUNT,
                P_PAID_CASH_AMOUNT              => V_PAID_CASH_AMOUNT,
                P_INVOICE_DATE                  => TO_DATE(V_INVOICE_DATE,''DD-MM-YYYY''),
                P_PROVIDER_INV_DATE             => TO_DATE(V_PROVIDER_INV_DATE,''DD-MM-YYYY''),
                P_STORE_DATE                    => TO_DATE(V_STORE_DATE,''DD-MM-YYYY''),
                P_INVOICE_NO                    => V_INVOICE_NO,
                P_INVOICE_ID                    => V_INVOICE_ID,
                P_BRANCH_ID                     => V_BRANCH_ID
            );
        END IF;
    END;
    L_ITEMS_ARR := L_BODY_OBJ.GET_ARRAY(''items'');
    FOR I IN 0..L_ITEMS_ARR.GET_SIZE - 1 LOOP
        L_ITEM_OBJ                := TREAT(L_ITEMS_ARR.GET(I) AS JSON_OBJECT_T);
        V_PRODUCT_ID              		:= L_ITEM_OBJ.GET_STRING(''product_id'');
        V_PRE_DISCOUNT_VAT_VALUE		:= L_ITEM_OBJ.GET_STRING(''pre_discount_vat_value'');
        V_QUANTITY              		:= L_ITEM_OBJ.GET_STRING(''quantity'');
        V_PRODUCT_UNIT_ID      			:= L_ITEM_OBJ.GET_STRING(''unit_id'');
        V_PRICE              			:= L_ITEM_OBJ.GET_STRING(''base_price'');
        V_TOTAL_PRICE              		:= L_ITEM_OBJ.GET_STRING(''total_price'');
        V_DISCOUNT_PERCENTAGE           := L_ITEM_OBJ.GET_STRING(''discount_percentage'');
        V_DISCOUNT_VALUE              	:= L_ITEM_OBJ.GET_STRING(''discount_value'');
        V_POST_DISCOUNT_TOTAL_PRICE     := L_ITEM_OBJ.GET_STRING(''post_discount_total_price'');
        V_VAT_PERCENTAGE              	:= L_ITEM_OBJ.GET_STRING(''vat_percentage'');
        V_VAT_VALUE              		:= L_ITEM_OBJ.GET_STRING(''vat_value'');
        V_TOTAL_AMOUNT              	:= L_ITEM_OBJ.GET_STRING(''total_amount'');
        IF NVL(V_DTL_ID,0) = 0 THEN
            SALES_PURCHASE_INV_DTL_TAPI.INS(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_PRICE                      => V_PRICE,
                P_QUANTITY                   => V_QUANTITY,
                P_DISCOUNT_VALUE             => V_DISCOUNT_VALUE,
                P_PRODUCT_ID                 => V_PRODUCT_ID,
                P_PRE_DISCOUNT_VAT_VALUE     => V_PRE_DISCOUNT_VAT_VALUE,
                P_VAT_PERCENTAGE             => V_VAT_PERCENTAGE,
                P_TOTAL_PRICE                => V_TOTAL_PRICE,
                P_VAT_VALUE                  => V_VAT_VALUE,
                P_PRODUCT_UNIT_ID            => V_PRODUCT_UNIT_ID,
                P_DISCOUNT_PERCENTAGE        => V_DISCOUNT_PERCENTAGE,
                P_POST_DISCOUNT_TOTAL_PRICE  => V_POST_DISCOUNT_TOTAL_PRICE,
                P_TOTAL_AMOUNT               => V_TOTAL_AMOUNT
            );
        ELSE
            SALES_PURCHASE_INV_DTL_TAPI.UPD(
                P_INVOICE_ID                 => V_INVOICE_ID,
                P_DTL_ID                     => V_DTL_ID,
                P_PRICE                      => V_PRICE,
                P_QUANTITY                   => V_QUANTITY,
                P_DISCOUNT_VALUE             => V_DISCOUNT_VALUE,
                P_PRODUCT_ID                 => V_PRODUCT_ID,
                P_PRE_DISCOUNT_VAT_VALUE     => V_PRE_DISCOUNT_VAT_VALUE,
                P_VAT_PERCENTAGE             => V_VAT_PERCENTAGE,
                P_TOTAL_PRICE                => V_TOTAL_PRICE,
                P_VAT_VALUE                  => V_VAT_VALUE,
                P_PRODUCT_UNIT_ID            => V_PRODUCT_UNIT_ID,
                P_DISCOUNT_PERCENTAGE        => V_DISCOUNT_PERCENTAGE,
                P_POST_DISCOUNT_TOTAL_PRICE  => V_POST_DISCOUNT_TOTAL_PRICE,
                P_TOTAL_AMOUNT               => V_TOTAL_AMOUNT
            );
        END IF;
    END LOOP;
    COMMIT;

    :status := ''1'';

end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'invoices',
      p_pattern            => 'purchase_invoice',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      

  ORDS.DEFINE_MODULE(
      p_module_name    => 'lists',
      p_base_path      => '/lists/',
      p_items_per_page =>  25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'lists',
      p_pattern        => 'bank_list',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'lists',
      p_pattern        => 'bank_list',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN

    open :items for
    SELECT DECODE(:p_lang_id,1,NVL(ACC_NAME_EN,ACC_NAME_AR), NVL(ACC_NAME_AR,ACC_NAME_EN)) NAME,
    BANK_ACC_ID id
    FROM SETUP_BANK_EXT_ACC 
    WHERE COMPANY_ID = :p_company_id;

END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'bank_list',
      p_method             => 'GET',
      p_name               => 'items',
      p_bind_variable_name => 'items',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'bank_list',
      p_method             => 'GET',
      p_name               => 'p_company_id',
      p_bind_variable_name => 'p_company_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'bank_list',
      p_method             => 'GET',
      p_name               => 'p_lang_id',
      p_bind_variable_name => 'p_lang_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'lists',
      p_pattern        => 'branch_list',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'lists',
      p_pattern        => 'branch_list',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN

    open :items for
    SELECT DECODE(:p_lang_id,2,NVL(NAME_AR,NAME_EN),NVL(NAME_EN,NAME_AR)) NAME,
    BRANCH_ID id
    FROM SETUP_BRANCH 
    WHERE COMPANY_ID = :p_company_id;

END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'branch_list',
      p_method             => 'GET',
      p_name               => 'items',
      p_bind_variable_name => 'items',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'branch_list',
      p_method             => 'GET',
      p_name               => 'p_company_id',
      p_bind_variable_name => 'p_company_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'branch_list',
      p_method             => 'GET',
      p_name               => 'p_lang_id',
      p_bind_variable_name => 'p_lang_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'lists',
      p_pattern        => 'cost_ctr_list',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'lists',
      p_pattern        => 'cost_ctr_list',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN

    open :items for
    SELECT DECODE(:p_lang_id,1,NVL(COST_CTR_name_EN,COST_CTR_name_ar),NVL(COST_CTR_name_ar,COST_CTR_name_EN)) NAME,
    COST_CTR_id id
    FROM ACC_COST_CENTER 
    WHERE COMPANY_ID = :p_company_id;

END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'cost_ctr_list',
      p_method             => 'GET',
      p_name               => 'items',
      p_bind_variable_name => 'items',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'cost_ctr_list',
      p_method             => 'GET',
      p_name               => 'p_company_id',
      p_bind_variable_name => 'p_company_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'cost_ctr_list',
      p_method             => 'GET',
      p_name               => 'p_lang_id',
      p_bind_variable_name => 'p_lang_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'lists',
      p_pattern        => 'invoice_type_list',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'lists',
      p_pattern        => 'invoice_type_list',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN

    open :items for
    SELECT DECODE(:p_lang_id,1,ITEM_DISPLAY_EN, ITEM_DISPLAY_AR) NAME,
    ITEM_NO id
    FROM ADMIN_LIST_ITEM 
    WHERE LIST_ID = 5;

END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'invoice_type_list',
      p_method             => 'GET',
      p_name               => 'items',
      p_bind_variable_name => 'items',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'invoice_type_list',
      p_method             => 'GET',
      p_name               => 'p_company_id',
      p_bind_variable_name => 'p_company_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'invoice_type_list',
      p_method             => 'GET',
      p_name               => 'p_lang_id',
      p_bind_variable_name => 'p_lang_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'lists',
      p_pattern        => 'payment_type_list',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'lists',
      p_pattern        => 'payment_type_list',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN

    open :items for
    SELECT DECODE(:p_lang_id,1,ITEM_DISPLAY_EN, ITEM_DISPLAY_AR) NAME,
    ITEM_NO id
    FROM ADMIN_LIST_ITEM 
    WHERE LIST_ID = 4;

END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'payment_type_list',
      p_method             => 'GET',
      p_name               => 'items',
      p_bind_variable_name => 'items',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'payment_type_list',
      p_method             => 'GET',
      p_name               => 'p_company_id',
      p_bind_variable_name => 'p_company_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'payment_type_list',
      p_method             => 'GET',
      p_name               => 'p_lang_id',
      p_bind_variable_name => 'p_lang_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'lists',
      p_pattern        => 'product_list',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'lists',
      p_pattern        => 'product_list',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN

    open :items for
    SELECT DECODE(:p_lang_id,1,PRODUCT_NAME_EN,PRODUCT_NAME_AR) NAME,
    PRODUCT_ID id
    FROM SALES_PRODUCT 
    WHERE COMPANY_ID = :p_company_id;

END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'product_list',
      p_method             => 'GET',
      p_name               => 'items',
      p_bind_variable_name => 'items',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'product_list',
      p_method             => 'GET',
      p_name               => 'p_company_id',
      p_bind_variable_name => 'p_company_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'product_list',
      p_method             => 'GET',
      p_name               => 'p_lang_id',
      p_bind_variable_name => 'p_lang_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'lists',
      p_pattern        => 'product_unit_list',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'lists',
      p_pattern        => 'product_unit_list',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN

    open :items for
    select decode(:p_lang_id,1,UNIT_NAME_EN,UNIT_NAME_AR) NAME, U.UNIT_ID id
    from SETUP_UNIT U,SALES_PRODUCT PU
    WHERE U.COMPANY_ID = :p_company_id AND U.UNIT_ID = PU.DEFAULT_UNIT_ID 
    AND PU.PRODUCT_ID =:p_product_id
    UNION ALL
    select decode(:p_lang_id,1,UNIT_NAME_EN,UNIT_NAME_AR) NAME, U.UNIT_ID id 
    from SETUP_UNIT U,SALES_PRODUCT_UNIT PU
    WHERE U.COMPANY_ID = :p_company_id AND U.UNIT_ID = PU.UNIT_ID AND PU.PRODUCT_ID =:p_product_id;


END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'product_unit_list',
      p_method             => 'GET',
      p_name               => 'items',
      p_bind_variable_name => 'items',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'product_unit_list',
      p_method             => 'GET',
      p_name               => 'p_company_id',
      p_bind_variable_name => 'p_company_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'product_unit_list',
      p_method             => 'GET',
      p_name               => 'p_lang_id',
      p_bind_variable_name => 'p_lang_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'product_unit_list',
      p_method             => 'GET',
      p_name               => 'p_product_id',
      p_bind_variable_name => 'p_product_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'lists',
      p_pattern        => 'provider_list',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'lists',
      p_pattern        => 'provider_list',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN

    open :items for
    SELECT DECODE(:p_lang_id,2,NVL(NAME_AR,NAME_EN),NVL(NAME_EN,NAME_AR)) NAME,
    PROVIDER_ID id
    FROM SALES_PROVIDER 
    WHERE COMPANY_ID = :p_company_id;

END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'provider_list',
      p_method             => 'GET',
      p_name               => 'items',
      p_bind_variable_name => 'items',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'provider_list',
      p_method             => 'GET',
      p_name               => 'p_company_id',
      p_bind_variable_name => 'p_company_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'provider_list',
      p_method             => 'GET',
      p_name               => 'p_lang_id',
      p_bind_variable_name => 'p_lang_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'lists',
      p_pattern        => 'save_list',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'lists',
      p_pattern        => 'save_list',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN

    open :items for
    SELECT DECODE(:p_lang_id,2,NVL(SAFE_NAME_AR,SAFE_NAME_EN),NVL(SAFE_NAME_EN,SAFE_NAME_AR)) NAME,
    SAFE_ID id
    FROM SETUP_SAFE 
    WHERE COMPANY_ID = :p_company_id;

END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'save_list',
      p_method             => 'GET',
      p_name               => 'items',
      p_bind_variable_name => 'items',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'save_list',
      p_method             => 'GET',
      p_name               => 'p_company_id',
      p_bind_variable_name => 'p_company_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'save_list',
      p_method             => 'GET',
      p_name               => 'p_lang_id',
      p_bind_variable_name => 'p_lang_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'lists',
      p_pattern        => 'store_list',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'lists',
      p_pattern        => 'store_list',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN

    open :items for
    SELECT DECODE(:p_lang_id,2,NVL(STORE_NAME_AR,STORE_NAME_EN),NVL(STORE_NAME_EN,STORE_NAME_AR)) NAME,
    STORE_ID id
    FROM SETUP_STORE 
    WHERE COMPANY_ID = :p_company_id;

END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'store_list',
      p_method             => 'GET',
      p_name               => 'items',
      p_bind_variable_name => 'items',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'store_list',
      p_method             => 'GET',
      p_name               => 'p_company_id',
      p_bind_variable_name => 'p_company_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'lists',
      p_pattern            => 'store_list',
      p_method             => 'GET',
      p_name               => 'p_lang_id',
      p_bind_variable_name => 'p_lang_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      

  ORDS.DEFINE_MODULE(
      p_module_name    => 'trade_v1',
      p_base_path      => '/trade_v1/',
      p_items_per_page =>  25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'trade_v1',
      p_pattern        => 'auth',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'trade_v1',
      p_pattern        => 'auth',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    P_USERNAME               NVARCHAR2(200);
    P_USER_PREFERED_LANG     VARCHAR2(200);
    P_USER_PREFERED_LANG_ID  NUMBER;
    P_COMPANY_ID             NUMBER;
    P_USER_ID                NUMBER;
    P_TOKEN                  VARCHAR2(2000);
    P_SESSION_ID             NUMBER;
BEGIN
    IF AUTH.LOGIN (P_USERNAME => :username, P_PASSWORD => :password) THEN
        AUTH.SET_USER_INFO (  
            P_USERNAME              => :username,
            P_USER_PREFERED_LANG    => P_USER_PREFERED_LANG,
            P_USER_PREFERED_LANG_ID => P_USER_PREFERED_LANG_ID,
            P_COMPANY_ID            => P_COMPANY_ID,
            P_USER_ID               => P_USER_ID
        );

        ADMIN_USER_SESSION_TAPI.INS(
            P_USER_ID               => P_USER_ID,
            P_COMPANY_ID            => P_COMPANY_ID,
            P_USERNAME              => P_USERNAME,
            P_USER_PREFERED_LANG    => P_USER_PREFERED_LANG,
            P_USER_PREFERED_LANG_ID => P_USER_PREFERED_LANG_ID,
            P_TOKEN                 => P_TOKEN,
            P_SESSION_ID            => P_SESSION_ID
        );
        COMMIT;
        :session_id := P_SESSION_ID;
        :lang_id := P_USER_PREFERED_LANG_ID;
        :user_id := P_USER_ID;
        :company_id := P_COMPANY_ID;
        :token := P_TOKEN;
        :status := 1;
        :status_code := 200;
    ELSE
        :status := ''0'';
        :message := ''بيانات الدخول غير صحيحة.'';
        :status_code := 401;
    END IF;
END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'trade_v1',
      p_pattern            => 'auth',
      p_method             => 'POST',
      p_name               => 'company_id',
      p_bind_variable_name => 'company_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'trade_v1',
      p_pattern            => 'auth',
      p_method             => 'POST',
      p_name               => 'lang_id',
      p_bind_variable_name => 'lang_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'trade_v1',
      p_pattern            => 'auth',
      p_method             => 'POST',
      p_name               => 'message',
      p_bind_variable_name => 'message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'trade_v1',
      p_pattern            => 'auth',
      p_method             => 'POST',
      p_name               => 'password',
      p_bind_variable_name => 'password',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'trade_v1',
      p_pattern            => 'auth',
      p_method             => 'POST',
      p_name               => 'session_id',
      p_bind_variable_name => 'session_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'trade_v1',
      p_pattern            => 'auth',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'trade_v1',
      p_pattern            => 'auth',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'trade_v1',
      p_pattern            => 'auth',
      p_method             => 'POST',
      p_name               => 'user_id',
      p_bind_variable_name => 'user_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'trade_v1',
      p_pattern            => 'auth',
      p_method             => 'POST',
      p_name               => 'username',
      p_bind_variable_name => 'username',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'trade_v1',
      p_pattern        => 'get_file',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'trade_v1',
      p_pattern        => 'get_file',
      p_method         => 'GET',
      p_source_type    => 'resource/lob',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'select :p_mime_type,BLOB_LOAD(:p_file_name) content from dual'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'trade_v1',
      p_pattern            => 'get_file',
      p_method             => 'GET',
      p_name               => 'p_file_name',
      p_bind_variable_name => 'p_file_name',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'trade_v1',
      p_pattern            => 'get_file',
      p_method             => 'GET',
      p_name               => 'p_mime_type',
      p_bind_variable_name => 'p_mime_type',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'trade_v1',
      p_pattern        => 'products',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'trade_v1',
      p_pattern        => 'products',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'SELECT
    product_Id ,
    product_Name ,
    product_Price ,
    product_Path 
FROM
    product'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'trade_v1',
      p_pattern        => 'purchases_invoices',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'trade_v1',
      p_pattern        => 'purchases_invoices',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'select INVOICE_ID,
       to_char(INVOICE_DATE,''dd-mm-yyyy'') INVOICE_DATE,
       STORE_DATE,
       PROVIDER_INV_DATE,
       STORE_ID,
       (
        SELECT
           ITEM_NOTE_AR  INV_TYPE
        FROM
            ADMIN_LIST_ITEM
        WHERE LIST_ID = 5 AND ITEM_NO = INVOICE_TYPE) INVOICE_TYPE,
       (
        SELECT
              ITEM_NOTE_AR INV_TYPE
        FROM
            ADMIN_LIST_ITEM
        WHERE LIST_ID = 4 AND ITEM_NO = PAYMENT_TYPE)PAYMENT_TYPE,
       SAFE_ID,
       COST_CTR_ID,

        C.NAME_AR PROVIDER_ID,
       INV.PROVIDER_INV_ID,
       INV.PRE_TAX_TOTAL_AMOUNT,
       INV.CLIENT_DISCOUNT,
       INV.TOTAL_DISCOUNT,
       INV.POST_DISCOUNT_TOTAL_AMOUNT,
       INV.TOTAL_VAT,
       INV.TOTAL_QUANTITY,
       INV.INVOICE_TOTAL_AMOUNT,
       INV.PAID_CASH_AMOUNT,
       INV.PAID_BANK_AMOUNT,
       INV.NOTES,
       INV.COMPANY_ID,
       INV.USER_ID,
       INV.BANK_ACC_ID,
       INV.PAID_AMOUNT,
       INV.DEFERRED_AMOUNT,
       INV.ACC_JOURNAL_ID,
       INV.INVOICE_NO,
       INV.BRANCH_ID
  from SALES_PURCHASE_INV INV JOIN SALES_PROVIDER C ON INV.PROVIDER_ID = C.PROVIDER_ID'
      );

  ORDS.DEFINE_MODULE(
      p_module_name    => 'utils',
      p_base_path      => '/utils/',
      p_items_per_page =>  25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'utils',
      p_pattern        => 'get_product_by_barcode',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'utils',
      p_pattern        => 'get_product_by_barcode',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_PRODUCT_ID NUMBER;
BEGIN

    SELECT min(PRO.PRODUCT_ID)
    INTO V_PRODUCT_ID
    FROM SALES_PRODUCT PRO LEFT JOIN SALES_PRODUCT_BARCODES CODE ON PRO.PRODUCT_ID = CODE.PRODUCT_ID
    WHERE (PRO.BARCODE = :p_barcode OR CODE.BARCODE = :p_barcode) AND PRO.COMPANY_ID = :p_company_id;
    IF V_PRODUCT_ID IS NOT NULL THEN

        WITH PROD AS (
            SELECT
                BARCODE,
                PURCHASE_PRICE PRICE_WITH_VAT,
                DEFAULT_UNIT_ID,
                TAX_VALUE VAT_PERCENTAGE,
                1 QUANTITY,
                0 DISCOUNT
            FROM
                SALES_PRODUCT
                where PRODUCT_ID  = V_PRODUCT_ID and COMPANY_ID = :p_company_id
        )
        SELECT
            V_PRODUCT_ID,
            PROD.QUANTITY,
            PROD.DEFAULT_UNIT_ID,
            BASE_PRICE,
            TOTAL_PRICE,
            PROD.DISCOUNT,
            DISCOUNT_VALUE,
            POST_DISCOUNT_TOTAL_PRICE,
            PROD.VAT_PERCENTAGE,
            VAT_VALUE,
            TOTAL_AMOUNT,
            PRE_DISCOUNT_VAT_VALUE,
            PROD.PRICE_WITH_VAT ORIGINAL_PRICE
        INTO 
            :product_id,
            :quantity,
            :unit_id,
            :base_price,
            :total_price,
            :discount,
            :discount_value,
            :post_discount_total_price,
            :vat_percentage,
            :vat_value,
            :total_amount,
            :pre_discount_vat_value,
            :original_price
        FROM PROD,TABLE(COMPUTE.CALC_INV(
            P_QUANTITY             => PROD.QUANTITY,
            P_BASE_PRICE           => 0,
            P_PRICE_WITH_VAT       => PROD.PRICE_WITH_VAT,
            P_TOTAL_PRICE          => 0,
            P_VAT_PERCENTAGE       => PROD.VAT_PERCENTAGE,
            P_DISCOUNT_PERCENTAGE  => PROD.DISCOUNT
            ));
    END IF;
END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'base_price',
      p_bind_variable_name => 'base_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'discount',
      p_bind_variable_name => 'discount',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'discount_value',
      p_bind_variable_name => 'discount_value',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'original_price',
      p_bind_variable_name => 'original_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'p_barcode',
      p_bind_variable_name => 'p_barcode',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'post_discount_total_price',
      p_bind_variable_name => 'post_discount_total_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'pre_discount_vat_value',
      p_bind_variable_name => 'pre_discount_vat_value',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'product_id',
      p_bind_variable_name => 'product_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'quantity',
      p_bind_variable_name => 'quantity',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'total_amount',
      p_bind_variable_name => 'total_amount',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'total_price',
      p_bind_variable_name => 'total_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'unit_id',
      p_bind_variable_name => 'unit_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'vat_percentage',
      p_bind_variable_name => 'vat_percentage',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_by_barcode',
      p_method             => 'GET',
      p_name               => 'vat_value',
      p_bind_variable_name => 'vat_value',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'utils',
      p_pattern        => 'get_product_price',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'utils',
      p_pattern        => 'get_product_price',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN
    WITH PROD AS (
        SELECT
            BARCODE,
            PURCHASE_PRICE PRICE_WITH_VAT,
            DEFAULT_UNIT_ID,
            TAX_VALUE VAT_PERCENTAGE,
            1 QUANTITY,
            0 DISCOUNT
        FROM
            SALES_PRODUCT
            where PRODUCT_ID  = :p_product_id and COMPANY_ID = :p_company_id
    )
    SELECT
        PROD.BARCODE,
        PROD.QUANTITY,
        PROD.DEFAULT_UNIT_ID,
        BASE_PRICE,
        TOTAL_PRICE,
        PROD.DISCOUNT,
        DISCOUNT_VALUE,
        POST_DISCOUNT_TOTAL_PRICE,
        PROD.VAT_PERCENTAGE,
        VAT_VALUE,
        TOTAL_AMOUNT,
        PRE_DISCOUNT_VAT_VALUE,
        PROD.PRICE_WITH_VAT ORIGINAL_PRICE
    INTO 
        :barcode,
        :quantity,
        :unit_id,
        :base_price,
        :total_price,
        :discount,
        :discount_value,
        :post_discount_total_price,
        :vat_percentage,
        :vat_value,
        :total_amount,
        :pre_discount_vat_value,
        :original_price
    FROM PROD,TABLE(COMPUTE.CALC_INV(
        P_QUANTITY             => PROD.QUANTITY,
        P_BASE_PRICE           => 0,
        P_PRICE_WITH_VAT       => PROD.PRICE_WITH_VAT,
        P_TOTAL_PRICE          => 0,
        P_VAT_PERCENTAGE       => PROD.VAT_PERCENTAGE,
        P_DISCOUNT_PERCENTAGE  => PROD.DISCOUNT
        ));
END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'barcode',
      p_bind_variable_name => 'barcode',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'base_price',
      p_bind_variable_name => 'base_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'discount',
      p_bind_variable_name => 'discount',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'discount_value',
      p_bind_variable_name => 'discount_value',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'original_price',
      p_bind_variable_name => 'original_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'post_discount_total_price',
      p_bind_variable_name => 'post_discount_total_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'pre_discount_vat_value',
      p_bind_variable_name => 'pre_discount_vat_value',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'quantity',
      p_bind_variable_name => 'quantity',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'total_amount',
      p_bind_variable_name => 'total_amount',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'total_price',
      p_bind_variable_name => 'total_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'unit_id',
      p_bind_variable_name => 'unit_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'vat_percentage',
      p_bind_variable_name => 'vat_percentage',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_price',
      p_method             => 'GET',
      p_name               => 'vat_value',
      p_bind_variable_name => 'vat_value',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'utils',
      p_pattern        => 'get_product_unit_price',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'utils',
      p_pattern        => 'get_product_unit_price',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'BEGIN
    WITH PROD AS (
        SELECT
            PURCHASE_PRICE PRICE_WITH_VAT,
            DEFAULT_UNIT_ID UNIT_ID,
            TAX_VALUE VAT_PERCENTAGE,
            :p_quantity QUANTITY,
            0 DISCOUNT
        FROM
            SALES_PRODUCT
            where PRODUCT_ID  = :p_product_id and COMPANY_ID = :p_company_id AND DEFAULT_UNIT_ID = :p_product_unit_id 
        UNION ALL
        SELECT
            U.PURCHASE_PRICE PRICE_WITH_VAT,
            U.UNIT_ID,
            P.TAX_VALUE VAT_PERCENTAGE,
            :p_quantity QUANTITY,
            0 DISCOUNT
        FROM
            SALES_PRODUCT_UNIT U,SALES_PRODUCT P
            where P.PRODUCT_ID = U.PRODUCT_ID 
            and U.UNIT_ID  = :p_product_unit_id 
            and P.DEFAULT_UNIT_ID <> :p_product_unit_id 
            AND U.PRODUCT_ID  = :p_product_id 
            and P.COMPANY_ID = :p_company_id
    )
    SELECT
        BASE_PRICE,
        TOTAL_PRICE,
        PROD.DISCOUNT,
        DISCOUNT_VALUE,
        POST_DISCOUNT_TOTAL_PRICE,
        PROD.VAT_PERCENTAGE,
        VAT_VALUE,
        TOTAL_AMOUNT,
        PRE_DISCOUNT_VAT_VALUE,
        PROD.PRICE_WITH_VAT ORIGINAL_PRICE

    INTO 
        :base_price,
        :total_price,
        :discount,
        :discount_value,
        :post_discount_total_price,
        :vat_percentage,
        :vat_value,
        :total_amount,
        :pre_discount_vat_value,
        :original_price
    FROM PROD,TABLE(COMPUTE.CALC_INV(
        P_QUANTITY             => PROD.QUANTITY,
        P_BASE_PRICE           => 0,
        P_PRICE_WITH_VAT       => PROD.PRICE_WITH_VAT,
        P_TOTAL_PRICE          => 0,
        P_VAT_PERCENTAGE       => PROD.VAT_PERCENTAGE,
        P_DISCOUNT_PERCENTAGE  => PROD.DISCOUNT
        ));
END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_unit_price',
      p_method             => 'GET',
      p_name               => 'base_price',
      p_bind_variable_name => 'base_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_unit_price',
      p_method             => 'GET',
      p_name               => 'discount',
      p_bind_variable_name => 'discount',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_unit_price',
      p_method             => 'GET',
      p_name               => 'discount_value',
      p_bind_variable_name => 'discount_value',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_unit_price',
      p_method             => 'GET',
      p_name               => 'original_price',
      p_bind_variable_name => 'original_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_unit_price',
      p_method             => 'GET',
      p_name               => 'post_discount_total_price',
      p_bind_variable_name => 'post_discount_total_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_unit_price',
      p_method             => 'GET',
      p_name               => 'pre_discount_vat_value',
      p_bind_variable_name => 'pre_discount_vat_value',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_unit_price',
      p_method             => 'GET',
      p_name               => 'total_amount',
      p_bind_variable_name => 'total_amount',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_unit_price',
      p_method             => 'GET',
      p_name               => 'total_price',
      p_bind_variable_name => 'total_price',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_unit_price',
      p_method             => 'GET',
      p_name               => 'vat_percentage',
      p_bind_variable_name => 'vat_percentage',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'utils',
      p_pattern            => 'get_product_unit_price',
      p_method             => 'GET',
      p_name               => 'vat_value',
      p_bind_variable_name => 'vat_value',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      


  COMMIT; 
END;