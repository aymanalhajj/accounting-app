-- Generated by Oracle SQL Developer REST Data Services 20.2.0.175.1842
-- Exported REST Definitions from ORDS Schema Version 24.2.2.r1871943
-- Schema: ACCOUNTING   Date: Fri Oct 25 23:11:17 AST 2024
--
BEGIN
  ORDS.DEFINE_MODULE(
      p_module_name    => 'accounts',
      p_base_path      => '/accounts/',
      p_items_per_page =>  25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'accounts',
      p_pattern        => 'journal',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'accounts',
      p_pattern        => 'journal',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_JOURNAL(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'accounts',
      p_pattern        => 'journal',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_ACC_JOURNAL_ID                 ACC_JOURNAL.ACC_JOURNAL_ID%TYPE;
	V_DTL_ID                         ACC_JOURNAL_DTL.JOURNAL_DTL_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    -----------------------------------------------------------------------------
    L_BODY_OBJ                       JSON_OBJECT_T;
    L_ITEMS_ARR                      JSON_ARRAY_T;
    L_ITEM_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''journal'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:BODY);
    -- step 2: call the procedure to validate inputs
--    DATA_VALIDATION.FIRST_PERIOD_STOCK_INV_VALIDATE(
--        P_DATA => L_BODY_OBJ,
--        P_LANG => 2,
--        P_RESULT => P_VALID_RESULT
--    );
--    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
--        OWA_UTIL.MIME_HEADER (''application/json'', TRUE); 
--        P_VALID_RESULT.PUT(''data-not-valid'',''true'');
--        HTP.P(P_VALID_RESULT.STRINGIFY);
--        RETURN;
--    END IF;
    V_ACC_JOURNAL_ID := L_BODY_OBJ.GET_STRING(''acc_journal_id'');
    BEGIN
        IF NVL(V_ACC_JOURNAL_ID,0) = 0 THEN
            ACC_JOURNAL_TAPI.INSERT_JOURNAL(
                P_JOURNAL_DATE      => L_BODY_OBJ.GET_STRING(''journal_date''),
                P_NOTE              => L_BODY_OBJ.GET_STRING(''note''),
                P_COMPANY_ID        => L_BODY_OBJ.GET_STRING(''company_id''),
                P_JOURNAL_TYPE      => L_BODY_OBJ.GET_STRING(''journal_type''),
                P_ACC_JOURNAL_ID    => V_ACC_JOURNAL_ID
            );
        ELSE
            ACC_JOURNAL_TAPI.UPDATE_JOURNAL(
                P_JOURNAL_DATE      => L_BODY_OBJ.GET_STRING(''journal_date''),
                P_NOTE              => L_BODY_OBJ.GET_STRING(''note''),
                P_COMPANY_ID        => L_BODY_OBJ.GET_STRING(''company_id''),
                P_ACC_JOURNAL_ID    => V_ACC_JOURNAL_ID
            );
        END IF;
    END;
    L_ITEMS_ARR := L_BODY_OBJ.GET_ARRAY(''items'');
--    STORE_FIRST_PERIOD_STOCK_DTL_TAPI.DEL_DTL(
--        P_INVOICE_ID  => V_INVOICE_ID,
--        P_ID_LIST     =>  L_ITEMS_ARR
--    ); 
    FOR I IN 0..L_ITEMS_ARR.GET_SIZE - 1 LOOP
        L_ITEM_OBJ                := TREAT(L_ITEMS_ARR.GET(I) AS JSON_OBJECT_T);
        V_DTL_ID           		  := L_ITEM_OBJ.GET_STRING(''dtl_id'');
        IF NVL(V_DTL_ID,0) = 0 THEN
            ACC_JOURNAL_DTL_TAPI.INSERT_JOURNAL_DTL(
                P_ACCOUNT_ID        => L_BODY_OBJ.GET_STRING(''account_id''),
                P_CREDIT            => L_BODY_OBJ.GET_STRING(''credit''),
                P_DEBIT             => L_BODY_OBJ.GET_STRING(''debit''),
                P_NOTE              => L_BODY_OBJ.GET_STRING(''note''),
                P_COST_CNTR_ID      => L_BODY_OBJ.GET_STRING(''cost_cntr_id''),
                P_REF_NO            => L_BODY_OBJ.GET_STRING(''ref_no''),
                P_JOURNAL_ID        => V_ACC_JOURNAL_ID,
                P_JOURNAL_DTL_ID    => V_DTL_ID
            );
        ELSE
            ACC_JOURNAL_DTL_TAPI.UPDATE_JOURNAL_DTL(
                P_ACCOUNT_ID        => L_BODY_OBJ.GET_STRING(''account_id''),
                P_CREDIT            => L_BODY_OBJ.GET_STRING(''credit''),
                P_DEBIT             => L_BODY_OBJ.GET_STRING(''debit''),
                P_NOTE              => L_BODY_OBJ.GET_STRING(''note''),
                P_COST_CNTR_ID      => L_BODY_OBJ.GET_STRING(''cost_cntr_id''),
                P_REF_NO            => L_BODY_OBJ.GET_STRING(''ref_no''),
                P_JOURNAL_ID        => V_ACC_JOURNAL_ID,
                P_JOURNAL_DTL_ID    => V_DTL_ID
            );
        END IF;
    END LOOP;
    COMMIT;
    :status := ''1'';
END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'accounts',
      p_pattern            => 'journal',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'accounts',
      p_pattern            => 'journal',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'accounts',
      p_pattern        => 'journals',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'accounts',
      p_pattern        => 'journals',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'SELECT
    ACC_JOURNAL_ID,
    JOURNAL_DATE,
    POSTED,
    NOTE,
    IS_CANCELED
FROM
    ACC_JOURNAL
WHERE COMPANY_ID = :p_company_id'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'accounts',
      p_pattern        => 'payment_voucher',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'accounts',
      p_pattern        => 'payment_voucher',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE
    V_INVOICE_ID    NUMBER;
    V_RESPONSE      CLOB;
BEGIN
    V_RESPONSE := GET_PAYMENT_VOUCHER(
        P_FIRST       => :p_first,
        P_LAST        => :p_last,
        P_NEXT        => :p_next,
        P_PREV        => :p_prev,
        P_ID          => :p_id
    );
    owa_util.mime_header (''application/json'', true);
    htp.p(V_RESPONSE);

END;'
      );
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'accounts',
      p_pattern        => 'payment_voucher',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'DECLARE	
	V_ACC_VOUCHER_ID                 ACC_VOUCHER.ACC_VOUCHER_ID%TYPE;
	V_DTL_ID                         ACC_VOUCHER_DTL.ACC_VOUCHER_ID%TYPE;
    V_TOKEN                          VARCHAR2(2000);
    -----------------------------------------------------------------------------
    L_BODY_OBJ                       JSON_OBJECT_T;
    L_ITEMS_ARR                      JSON_ARRAY_T;
    L_ITEM_OBJ                       JSON_OBJECT_T;
    P_VALID_RESULT                   JSON_OBJECT_T;
    -----------------------------------------------------------------------------
BEGIN
    V_TOKEN := :token;
    INSERT INTO API_LOG (
        API,
        REQ_BODY
    ) VALUES (
        ''journal'',
        V_TOKEN
    );
    COMMIT;
    L_BODY_OBJ := JSON_OBJECT_T(:BODY);
    -- step 2: call the procedure to validate inputs
--    DATA_VALIDATION.FIRST_PERIOD_STOCK_INV_VALIDATE(
--        P_DATA => L_BODY_OBJ,
--        P_LANG => 2,
--        P_RESULT => P_VALID_RESULT
--    );
--    IF P_VALID_RESULT.GET_STRING(''status'') = ''failed'' THEN
--        OWA_UTIL.MIME_HEADER (''application/json'', TRUE); 
--        P_VALID_RESULT.PUT(''data-not-valid'',''true'');
--        HTP.P(P_VALID_RESULT.STRINGIFY);
--        RETURN;
--    END IF;
    V_ACC_VOUCHER_ID := L_BODY_OBJ.GET_STRING(''acc_voucher_id'');
    BEGIN
        IF NVL(V_ACC_VOUCHER_ID,0) = 0 THEN
            ACC_VOUCHER_TAPI.INSERT_VOUCHER(
                P_AMOUNT            => L_BODY_OBJ.GET_STRING(''amount''),
                P_ACCOUNT_ID        => L_BODY_OBJ.GET_STRING(''account_id''),
                P_PAID_TO           => L_BODY_OBJ.GET_STRING(''paid_to''),
                P_REF_ID            => L_BODY_OBJ.GET_STRING(''ref_id''),
                P_PAYMENT_METHOD    => L_BODY_OBJ.GET_STRING(''payment_method''),
                P_VOUCHER_DATE      => L_BODY_OBJ.GET_STRING(''voucher_date''),
                P_VOUCHER_TYPE      => L_BODY_OBJ.GET_STRING(''voucher_type''),
                P_NOTE              => L_BODY_OBJ.GET_STRING(''note''),
                P_COST_CNTR_ID      => L_BODY_OBJ.GET_STRING(''cost_cntr_id''),
                P_CHECK_DATE        => L_BODY_OBJ.GET_STRING(''check_date''),
                P_CHECK_NO          => L_BODY_OBJ.GET_STRING(''check_no''),
                P_TOTAL_VAT         => L_BODY_OBJ.GET_STRING(''total_vat''),
                P_COMPANY_ID        => L_BODY_OBJ.GET_STRING(''company_id''),
                P_ACC_VOUCHER_ID    => V_ACC_VOUCHER_ID
            );
        ELSE
            ACC_VOUCHER_TAPI.UPDATE_VOUCHER(
                P_AMOUNT            => L_BODY_OBJ.GET_STRING(''amount''),
                P_ACCOUNT_ID        => L_BODY_OBJ.GET_STRING(''account_id''),
                P_PAID_TO           => L_BODY_OBJ.GET_STRING(''paid_to''),
                P_REF_ID            => L_BODY_OBJ.GET_STRING(''ref_id''),
                P_PAYMENT_METHOD    => L_BODY_OBJ.GET_STRING(''payment_method''),
                P_VOUCHER_DATE      => L_BODY_OBJ.GET_STRING(''voucher_date''),
                P_VOUCHER_TYPE      => L_BODY_OBJ.GET_STRING(''voucher_type''),
                P_NOTE              => L_BODY_OBJ.GET_STRING(''note''),
                P_COST_CNTR_ID      => L_BODY_OBJ.GET_STRING(''cost_cntr_id''),
                P_CHECK_DATE        => L_BODY_OBJ.GET_STRING(''check_date''),
                P_CHECK_NO          => L_BODY_OBJ.GET_STRING(''check_no''),
                P_TOTAL_VAT         => L_BODY_OBJ.GET_STRING(''total_vat''),
                P_COMPANY_ID        => L_BODY_OBJ.GET_STRING(''company_id''),
                P_ACC_VOUCHER_ID    => V_ACC_VOUCHER_ID
            );
        END IF;
    END;
    L_ITEMS_ARR := L_BODY_OBJ.GET_ARRAY(''items'');
--    STORE_FIRST_PERIOD_STOCK_DTL_TAPI.DEL_DTL(
--        P_INVOICE_ID  => V_INVOICE_ID,
--        P_ID_LIST     =>  L_ITEMS_ARR
--    ); 
    FOR I IN 0..L_ITEMS_ARR.GET_SIZE - 1 LOOP
        L_ITEM_OBJ                := TREAT(L_ITEMS_ARR.GET(I) AS JSON_OBJECT_T);
        V_DTL_ID           		  := L_ITEM_OBJ.GET_STRING(''acc_voucher_dtl_id'');
        IF NVL(V_DTL_ID,0) = 0 THEN
            ACC_VOUCHER_DTL_TAPI.INSERT_DTL(
                P_ACC_VOUCHER_ID        => V_ACC_VOUCHER_ID,
                P_ACCOUNT_ID            => L_BODY_OBJ.GET_STRING(''account_id''),
                P_AMOUNT                => L_BODY_OBJ.GET_STRING(''amount''),
                P_NOTE                  => L_BODY_OBJ.GET_STRING(''note''),
                P_TAX_RATE              => L_BODY_OBJ.GET_STRING(''tax_rate''),
                P_TAX_AMOUNT            => L_BODY_OBJ.GET_STRING(''tax_amount''),
                P_REF_ID                => L_BODY_OBJ.GET_STRING(''ref_id''),
                P_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''total_amount''),
                P_COST_CNTR_ID          => L_BODY_OBJ.GET_STRING(''cost_cntr_id'')
            );
        ELSE
            ACC_VOUCHER_DTL_TAPI.UPDATE_DTL(
                P_ACC_VOUCHER_DTL_ID    => V_DTL_ID,
                P_ACC_VOUCHER_ID        => V_ACC_VOUCHER_ID,
                P_ACCOUNT_ID            => L_BODY_OBJ.GET_STRING(''account_id''),
                P_AMOUNT                => L_BODY_OBJ.GET_STRING(''amount''),
                P_NOTE                  => L_BODY_OBJ.GET_STRING(''note''),
                P_TAX_RATE              => L_BODY_OBJ.GET_STRING(''tax_rate''),
                P_TAX_AMOUNT            => L_BODY_OBJ.GET_STRING(''tax_amount''),
                P_REF_ID                => L_BODY_OBJ.GET_STRING(''ref_id''),
                P_TOTAL_AMOUNT          => L_BODY_OBJ.GET_STRING(''total_amount''),
                P_COST_CNTR_ID          => L_BODY_OBJ.GET_STRING(''cost_cntr_id'')
            );
        END IF;
    END LOOP;
    COMMIT;
    :status := ''1'';
END;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'accounts',
      p_pattern            => 'payment_voucher',
      p_method             => 'POST',
      p_name               => 'status',
      p_bind_variable_name => 'status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);      
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'accounts',
      p_pattern            => 'payment_voucher',
      p_method             => 'POST',
      p_name               => 'token',
      p_bind_variable_name => 'token',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'accounts',
      p_pattern        => 'payment_vouchers',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'accounts',
      p_pattern        => 'payment_vouchers',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page =>  50,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'SELECT
    ACC_VOUCHER_ID,
    AMOUNT,
    ACCOUNT_ID,
    TO_CHAR(VOUCHER_DATE,''dd-mm-yyyy'') VOUCHER_DATE,
    VOUCHER_TYPE,
    NOTE,
    REF_ID,
    PAYMENT_METHOD,
    PAID_TO,
    POSTED,
    CHECK_NO,
    CHECK_DATE,
    COST_CNTR_ID,
    TOTAL_VAT
FROM
    ACC_VOUCHER
WHERE
    VOUCHER_TYPE = 3 AND COMPANY_ID = :p_company_id'
      );


  COMMIT; 
END;